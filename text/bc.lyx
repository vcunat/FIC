#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\begin_preamble
%\usepackage[utf-8]{inputenc} % nastavuje použité kódování, uživatelé Windows zamění latin2 za cp1250
%\usepackage[czech]{babel}
%\usepackage{a4wide} % nastavuje standardní evropský formát stránek A4
%\usepackage{index} % nutno použít v případě tvorby rejstříku balíčkem makeindex
%\usepackage{fancybox} % umožňuje pokročilé rámečkování :-)
%\usepackage[final]{graphicx} % nezbytné pro standardní vkládání obrázků do dokumentu

\usepackage[bindingoffset=1.5cm]{geometry} % nastavení dané velikosti okrajů
%[outer=2.5cm,inner=4cm,top=2cm,bottom=3cm]

%\newindex{default}{idx}{ind}{Rejstřík} % zavádí rejstřík v případě použití balíku index


\def\bcTitle{Moderní metody fraktální komprese obrazu}  
\def\bcTitleEn{Contemporary Methods in Fractal Image Compression}
\def\bcAuthor{Vladimír Čunát} 
\def\bcAuthorEn{Vladimir Cunat} 
\def\bcTeacher{RNDr.~Tomáš Dvořák, CSc.}
\def\bcTeacherMail{Tomas.Dvorak@mff.cuni.cz}
\def\bcKSVI{Kabinet software a výuky informatiky}
\def\bcKSVIen{Department of Software and Computer Science Education}

\title{\bcTitle}
\author{\bcAuthor}
\date{\today}

\usepackage[ 
pdfauthor={\bcAuthorEn}, 
pdftitle={\bcTitleEn}, 
pdfcreator={Lyx}, 
pdfsubject={Fractal Image Compression}, 
pdfkeywords={image compression,fractals} 
]{hyperref}

% url formátování, použito v referencích
\usepackage{url}

\usepackage{amsthm}
\newtheorem*{veta}{Věta}
\end_preamble
\options notitlepage,12pt
\use_default_options false
\language czech
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic true
\paperorientation portrait
\paperwidth 0cm
\paperheight 0cm
\leftmargin 4cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 1cm
\headsep 1cm
\footskip 1.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "bc_start.tex"

\end_inset


\end_layout

\begin_layout Chapter
Úvod
\end_layout

\begin_layout Standard
<Představení práce, motivace a přehled obsahu kapitol.>
\end_layout

\begin_layout Chapter
Vývoj a principy fraktální komprese obrazu
\end_layout

\begin_layout Standard
V této kapitole bude používáno následující značení:
\end_layout

\begin_layout Description
potenční
\begin_inset space ~
\end_inset

množina 
\begin_inset Formula $2^{X}=\left\{ A:\, A\subseteq X\right\} $
\end_inset


\end_layout

\begin_layout Description
iterace
\begin_inset space ~
\end_inset

zobrazení mějme zobrazení 
\begin_inset Formula $f:\, X\rightarrow X$
\end_inset

, pak 
\begin_inset Formula $f^{k}:\, X\rightarrow X$
\end_inset

 je definováno tak, že 
\begin_inset Formula $f^{0}$
\end_inset

 je identita a
\begin_inset Formula \[
\forall k\geq1\quad\forall x\in X\quad f^{k}\left(x\right)=f\left(f^{k-1}\left(x\right)\right)\]

\end_inset


\end_layout

\begin_layout Description
kontraktivita
\begin_inset space ~
\end_inset

zobrazení zobrazení 
\begin_inset Formula $f:\, X\rightarrow X$
\end_inset

 na metrickém prostoru 
\begin_inset Formula $X$
\end_inset

 s
\begin_inset space ~
\end_inset

metrikou 
\begin_inset Formula $d$
\end_inset

 je kontraktivní, pokud
\begin_inset Formula \[
\exists s<1\quad\forall x,y\in X\quad d\left(x,y\right)\leq s\, d\left(f\left(x\right),f\left(y\right)\right)\]

\end_inset

takové 
\begin_inset Formula $s$
\end_inset

 budeme nazývat faktorem kontraktivity 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Section
IFS
\end_layout

\begin_layout Standard
Základy fraktální komprese byly položeny v druhé polovině 80.
\begin_inset space \thinspace{}
\end_inset

let, kdy Barnsley studoval systémy iterovaných funkcí (IFS).
 IFS je množina bodů 
\begin_inset Formula $A$
\end_inset

 v
\begin_inset space ~
\end_inset

úplném metrickém prostoru 
\begin_inset Formula $X$
\end_inset

 definována pomocí souboru kontraktivních zobrazení 
\begin_inset Formula $X$
\end_inset

 do sebe.
 Mějme soubor zobrazení 
\begin_inset Formula $f_{i}:X\rightarrow X$
\end_inset

 pro 
\begin_inset Formula $i\in J$
\end_inset

 a definujme jejich sjednocení 
\begin_inset Formula $f:2^{X}\rightarrow2^{X}$
\end_inset

 tak, že pro 
\begin_inset Formula $B\subseteq X$
\end_inset

 
\begin_inset Formula $f\left(B\right)=\left\{ f_{i}\left(b\right)\mid i\in J,\ b\in B\right\} $
\end_inset

.
 Na 
\begin_inset Formula $2^{X}$
\end_inset

 lze definovat metriku tak, abychom dostali zase úplný metrický prostor
 a zobrazení 
\begin_inset Formula $f$
\end_inset

 bylo kontraktivní, jak je ukázáno například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Barn88b"

\end_inset

 pomocí Hausdorffovy metriky.
 To podle Banachovy věty o
\begin_inset space ~
\end_inset

pevném bodě dává, že takto vzniklé zobrazení 
\begin_inset Formula $f$
\end_inset

 má právě jeden pevný bod, kterým je právě hledaná množina 
\begin_inset Formula $A$
\end_inset

, často nazývaná atraktor nebo fraktál
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
fraktály lze konstruovat i jinými způsoby než pomocí IFS
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
IFS mají několik zajímavých vlastností.
 Pro získání atraktoru stačí znát zobrazení 
\begin_inset Formula $f$
\end_inset

 a iterovat ho na libovolné neprázdné kompaktní podmnožině prostoru 
\begin_inset Formula $X$
\end_inset

.
 Navíc vzniklé fraktály mohou mít detailní kresbu při libovolném přiblížení,
 přestože jejich matematický popis je velmi malý, takže pro tyto speciální
 obrázky lze dosáhnout libovolně velkého kompresního poměru.
 Mezi nejznámější IFS patří Barnsleyho kapradina, generovaná v 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 pomocí čtyř afinních zobrazení.
 Barnsley zkoumal, zda by nebylo možné proces obrátit
\begin_inset space ~
\end_inset

--- k
\begin_inset space ~
\end_inset

danému obrázku najít soubor zobrazení, jehož pevný bod by obrázku byl velmi
 blízký.
 Pak by místo souboru pixelů stačil pro popis obrázku jen popis těchto zobrazení.
\end_layout

\begin_layout Standard
Zde se používá takzvaná kolážová věta, uvedená například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

, která dává horní odhad na odchylku atraktoru od požadovaného obrázku:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{veta}
\end_layout

\end_inset

 Nechť 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $f$
\end_inset

 je zobrazení úplného metrického prostoru do sebe, které je kontraktivní
 s
\begin_inset space ~
\end_inset

faktorem 
\begin_inset Formula $s<1$
\end_inset

 v
\begin_inset space ~
\end_inset

metrice 
\begin_inset Formula $d$
\end_inset

, pak 
\begin_inset Formula \[
d\left(A,\lim_{n\rightarrow\infty}f^{n}\left(A\right)\right)\;\le\;\frac{1}{1-s}\, d\left(A,f\left(A\right)\right)\]

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{veta}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Díky tomu stačí hledat zobrazení, která obrázek transformují a přitom ho
 změní co nejméně.
 Pro jistotu konvergence dokonce stačí,
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 že 
\begin_inset Formula $f^{k}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 je kontraktivní s
\begin_inset space ~
\end_inset

faktorem 
\begin_inset Formula $s<1$
\end_inset

 pro nějaké 
\begin_inset Formula $k$
\end_inset

.
 Ukázalo se, že největší problém je v
\begin_inset space ~
\end_inset

tom, že na rozdíl od klasických IFS málokterý obrázek lze charakterizovat
 jako sjednocení několika transformovaných zmenšenin celého obrázku.
 Bylo sice možné obrázek rozdělit na menší kusy charakterizované IFS, ale
 tuto metodu se nepodařilo zautomatizovat.
\end_layout

\begin_layout Section
PIFS
\begin_inset CommandInset label
LatexCommand label
name "PIFS"

\end_inset


\end_layout

\begin_layout Standard
Pro kompresi obrázků také bylo nutné najít lepší model, než množinu bodů
 v
\begin_inset space ~
\end_inset


\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

.
 Jedna z
\begin_inset space ~
\end_inset

možností reprezentace obrázků ve stupních šedi je funkce tvaru 
\begin_inset Formula $g:I^{2}\rightarrow I$
\end_inset

, kde 
\begin_inset Formula $I$
\end_inset

 je značení pro interval 
\begin_inset Formula $\left[0,1\right]\subset\mathbb{R}$
\end_inset

.
 Zde budeme analogicky hledat soubor funkcí na těchto obrázkových funkcích
 (budeme je nazývat operátory) takový, aby jejich sjednocením vznikl operátor
 
\begin_inset Formula $F$
\end_inset

 s
\begin_inset space ~
\end_inset

pevným bodem co nejblíže danému obrázku (tedy jeho funkci).
 Aby bylo zaručeno, že lze sjednocení provést, v
\begin_inset space ~
\end_inset

PIFS (partitioned IFS) je prostor obrázku rozdělen na disjunktní části
\begin_inset Formula \[
\forall i\in J\quad R_{i}\subset I^{2},\qquad\bigcup_{i\in J}R_{i}=I^{2},\qquad\forall i,j\in J\quad i\neq j\;\rightarrow\; R_{i}\cap R_{j}=\emptyset\]

\end_inset

a operátory jsou tvaru 
\begin_inset Formula $F_{i}:\left(I^{2}\rightarrow I\right)\rightarrow\left(R_{i}\rightarrow I\right)$
\end_inset

.
\end_layout

\begin_layout Standard
PIFS, které zavedl Jacquin, dnes tvoří základ naprosté většiny technik pro
 fraktální kompresi obrazu.
 Pro zjednodušení se zde uvažují pouze afinní operátory, kde se navíc vzájemně
 neovlivňuje transformace polohy s
\begin_inset space ~
\end_inset

transformací barvy.
 Formální zápis aplikace operátoru na obrázek 
\begin_inset Formula $g:I^{2}\rightarrow I$
\end_inset

 
\begin_inset Formula \[
F_{i}g=h_{i},\qquad h_{i}:R_{i}\rightarrow I,\qquad h_{i}\left(\left[\begin{array}{c}
x\\
y\end{array}\right]\right)=\left(c_{i}\circ g\circ w_{i}\right)\left(\left[\begin{array}{c}
x\\
y\end{array}\right]\right)\]

\end_inset


\begin_inset Formula \[
\text{pro nějaká afinní zobrazení\quad}w_{i}:R_{i}\rightarrow I^{2}\mbox{\quad a\quad}c_{i}:I\rightarrow\mathbb{R}\]

\end_inset

Za 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $R_{i}$
\end_inset

 se volí souvislé části obrazu, typicky čtverce o
\begin_inset space ~
\end_inset

straně délky 
\begin_inset Formula $2^{k}$
\end_inset

, a
\begin_inset space ~
\end_inset

nazývají se cílové bloky.
 Díky spojitosti 
\begin_inset Formula $w_{i}$
\end_inset

 jsou 
\begin_inset Formula $D_{i}=w_{i}\left(R_{i}\right)$
\end_inset

 také souvislé části obrazu a nazývají se zdrojové bloky.
\begin_inset Foot
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
značení 
\begin_inset Formula $D_{i}$
\end_inset

 a 
\begin_inset Formula $R_{i}$
\end_inset

 pochází z
\begin_inset space ~
\end_inset

anglických termínů 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
domain block
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 a 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
range block
\end_layout

\end_inset

 Transformace 
\begin_inset Formula $w_{i}$
\end_inset

 určuje, která část obrazu bude zobrazena do cílového bloku a také jak bude
 otočena a případně symetricky převrácena.
 Za 
\begin_inset Formula $w_{i}$
\end_inset

 se volí kontraktivní zobrazení, přestože to pro níže uvedené tvrzení o
\begin_inset space ~
\end_inset

konvergenci není potřeba.
 Tato kontraktivita mimo jiné způsobuje vytváření nových detailů při přiblížení.
\end_layout

\begin_layout Subsection
Konvergence PIFS
\end_layout

\begin_layout Standard
Pro konvergenci a horní odhad chyby PIFS modelu lze zase použít kolážovou
 větu.
 Následující důkaz je modifikací důkazu uvedeného v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

.
 Zde se hodí metrika na obrázcích (funkcích 
\begin_inset Formula $g_{i}:I^{2}\rightarrow I$
\end_inset

)
\begin_inset Formula \[
d_{s\mathrm{up}}\left(g_{1},g_{2}\right)=\sup_{\vec{z}\in I^{2}}\left\{ \left|g_{1}\left(\vec{z}\right)-g_{2}\left(\vec{z}\right)\right|\right\} \]

\end_inset

Postačí, aby existovalo 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $s<1$
\end_inset

 takové, že každé ze zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 má lineární člen 
\begin_inset Formula $a_{i}:\;\left|a_{i}\right|\le s$
\end_inset

.
 Pak pro libovolné obrázky 
\begin_inset Formula $g_{1},g_{2}:I^{2}\rightarrow I$
\end_inset

 a každý bod 
\begin_inset Formula $\vec{z}\in I^{2}$
\end_inset

 existuje právě jedno 
\begin_inset Formula $R_{i}$
\end_inset

 takové, že 
\begin_inset Formula $\vec{z}\in R_{i}$
\end_inset

 a platí
\begin_inset Formula \[
\left|\left(F_{i}g_{1}\right)\left(\vec{z}\right)-\left(F_{i}g_{2}\right)\left(\vec{z}\right)\right|\;\le\; s\left|\left(g_{1}\circ w_{i}\right)\left(\vec{z}\right)-\left(g_{2}\circ w_{i}\right)\left(\vec{z}\right)\right|\;\leq\; s\, d_{s\mathrm{up}}\left(g_{1},g_{2}\right)\]

\end_inset

Z toho už plyne kontraktivita celého operátoru 
\begin_inset Formula $F$
\end_inset

 
\begin_inset Formula \[
d_{s\mathrm{up}}\left(Fg_{1},Fg_{2}\right)\;\le\; s\, d_{s\mathrm{up}}\left(g_{1},g_{2}\right)\]

\end_inset

 a díky tomu lze použít kolážovou větu.
\end_layout

\begin_layout Standard
Ukazuje se ale, že pro použití v
\begin_inset space ~
\end_inset

implementaci je tento odhad příliš volný, stejně jako použitá metrika nedává
 dobré vizuální výsledky.
\end_layout

\begin_layout Subsection
Optimální zobrazení
\begin_inset CommandInset label
LatexCommand label
name "PIFS/Optimální_zobrazení"

\end_inset


\end_layout

\begin_layout Standard
Pro daný cílový blok 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $R_{i}$
\end_inset

 se volí afinní zobrazení 
\begin_inset Formula $w_{i}$
\end_inset

 tak, aby mapovalo blok na jeden ze souboru zdrojových bloků.
 Tento soubor bývá pevně daný kvůli zjednodušení ukládání a vyhledávání.
 Volba zdrojového bloku je hlavním zdrojem výpočetní složitosti celé komprese
 a jejímu urychlení byla věnována značná část výzkumu v
\begin_inset space ~
\end_inset

oblasti.
 Obecně je snaha zvolit takový blok 
\begin_inset Formula $D_{i}$
\end_inset

, že spolu s
\begin_inset space ~
\end_inset

optimálním barevným zobrazením 
\begin_inset Formula $c_{i}$
\end_inset

 bude pro složený operátor 
\begin_inset Formula $F_{i}g=\left(c_{i}\circ g\circ w_{i}\right)$
\end_inset

 vzdálenost 
\begin_inset Formula $d\left(\ c_{i}\circ g\circ w_{i},\ g\ \right)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
měřená na 
\begin_inset Formula $R_{i}$
\end_inset

 co nejmenší.
\begin_inset Note Note
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
vysvětlit měření na části
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Volba optimálního zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 a tedy i následně volba 
\begin_inset Formula $w_{i}$
\end_inset

 je silně závislá na použité metrice.
 Ve fraktální kompresi se téměř výhradně používá RMSE metrika.
 Její hlavní výhody i nevýhody jsou dány tím, že se vždy berou v
\begin_inset space ~
\end_inset

úvahu pouze sobě odpovídající body.
 To umožnuje velmi jednoduchou a rychlou práci s
\begin_inset space ~
\end_inset

metrikou a také optimalizaci v
\begin_inset space ~
\end_inset

ní, na druhou stranu díky tomu pro větší bloky nedává metrika výsledky odpovídaj
ící vizuálnímu rozdílu.
 Možnosti použití alternativních metrik jsou zmíněny v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "Články/Zlepšení_vzhledu/Další_metody"

\end_inset

.
\end_layout

\begin_layout Standard
Jak je ukázáno v
\begin_inset space ~
\end_inset

kapitole
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení"

\end_inset

 pro diskrétní případ, při použití RMSE existuje právě jedno optimální 
\begin_inset Formula $c_{i}$
\end_inset

 a lze ho (pro dané 
\begin_inset Formula $g$
\end_inset

 a 
\begin_inset Formula $w_{i}$
\end_inset

) snadno spočítat analyticky.
 To platí za předpokladu, že 
\begin_inset Formula $g\circ w_{i}$
\end_inset

 není konstantní na 
\begin_inset Formula $R_{i}$
\end_inset

 (tj.
\begin_inset space ~
\end_inset


\begin_inset Formula $g$
\end_inset

 není konstantní na 
\begin_inset Formula $D_{i}$
\end_inset

)
\begin_inset space ~
\end_inset

--- jinak by se jednalo o
\begin_inset space ~
\end_inset

aproximaci konstantním blokem, volba lineárního koeficientu by byla libovolná
 a výsledek vždy horší, než při výběru jakéhokoliv nekonstantního zdrojového
 bloku.
\end_layout

\begin_layout Subsection
Rychlá konvergence
\begin_inset CommandInset label
LatexCommand label
name "PIFS/Rychlá_konvergence"

\end_inset


\end_layout

\begin_layout Standard
Fraktální komprese v
\begin_inset space ~
\end_inset

této podobě stále trpěla jedním skrytým problémem.
 Při dodržení kontraktivity všech zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 kolážová věta sice zaručovala, že obrázek zkonverguje (v
\begin_inset space ~
\end_inset

prostoru všech obrázků s
\begin_inset space ~
\end_inset

libovolnou metrikou) a nebude se příliš lišit, ale nijak neomezovala počet
 nutných iteračních kroků.
 Ukázalo se, že tento problém není jen teoretický
\begin_inset space ~
\end_inset

--- i
\begin_inset space ~
\end_inset

při přísnějších omezeních na kontraktivitu bylo pro některé obrázky nutné
 provádět mnoho desítek iterací než změny přestaly být okem viditelné.
\end_layout

\begin_layout Standard
Řešení tohoto problému bylo publikováno v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Oien94"

\end_inset

 a podrobněji rozebráno v
\begin_inset space ~
\end_inset

6.
\begin_inset space ~
\end_inset

kapitole knihy
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

.
 Jedná se jen o
\begin_inset space ~
\end_inset

drobnou modifikaci barevného zobrazení.
 Pokud bylo původní optimální barevné zobrazení ve tvaru 
\begin_inset Formula $c_{i}\left(z\right)=p_{i}\, z+q_{i}$
\end_inset

, pak místo ukládání 
\begin_inset Formula $p_{i}$
\end_inset

 i 
\begin_inset Formula $q_{i}$
\end_inset

 je uloženo 
\begin_inset Formula $p_{i}$
\end_inset

 a průměrná barva bloku 
\begin_inset Formula $R_{i}$
\end_inset

.
 Nové zobrazení 
\begin_inset Formula $\tilde{c_{i}}$
\end_inset

 pak znormalizuje barvu zdrojového bloku 
\begin_inset Formula $D_{i}$
\end_inset

 odečtením jeho aktuálního průměru, výsledek vynásobí lineárním koeficienem
 
\begin_inset Formula $p_{i}$
\end_inset

 a přičte předpočítanou průměrnou barvu bloku 
\begin_inset Formula $R_{i}$
\end_inset

 ve vstupním obrázku.
\end_layout

\begin_layout Standard
Přestože přičítaná průměrná barva 
\begin_inset Formula $R_{i}$
\end_inset

 je uložena v
\begin_inset space ~
\end_inset

charakteristice zobrazení a je stále stejná, skutečný konstantní koeficient
 (výše značený 
\begin_inset Formula $q_{i}$
\end_inset

) se může měnit s
\begin_inset space ~
\end_inset

každou iterací, takže z
\begin_inset space ~
\end_inset

matematického hlediska se 
\begin_inset Formula $\tilde{c_{i}}$
\end_inset

 chová pokaždé jako jiné zobrazení.
\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

rámci jedné iterace je ale 
\begin_inset Formula $\tilde{c_{i}}$
\end_inset

 stále afinní zobrazení.
 Navíc lze snadno ukázat, že při použití RMSE metriky optimální afinní zobrazení
 
\begin_inset Formula $c_{i}$
\end_inset

 také vždy zobrazuje průměnou barvu 
\begin_inset Formula $D_{i}$
\end_inset

 na průměrnou barvu 
\begin_inset Formula $R_{i}$
\end_inset

, takže když stav obrázku při iterování konverguje k
\begin_inset space ~
\end_inset


\begin_inset Formula $g$
\end_inset

 (zdrojovému obrázku), pak i
\begin_inset space ~
\end_inset


\begin_inset Formula $\tilde{c_{i}}$
\end_inset

 konverguje k
\begin_inset space ~
\end_inset


\begin_inset Formula $c_{i}$
\end_inset

.
 
\end_layout

\begin_layout Standard
V tomto přístupu je tedy iterační operátor složitější na vyhodnocení, ale
 má lepší vlastnosti, například efektivnější ukládání koeficientů zobrazení
 díky jejich menší korelaci.
 Koeficienty 
\begin_inset Formula $q_{i}$
\end_inset

 zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 byly většinou v
\begin_inset space ~
\end_inset

absolutní hodnotě malá čísla, ale mohly se pohybovat ve velkém rozsahu.
 Průměrná barva bloku se může pohybovat jen v
\begin_inset space ~
\end_inset

rozmezí 
\begin_inset Formula $\left[0,1\right]$
\end_inset

 a má jasnější význam
\begin_inset space ~
\end_inset

--- to pomáhá při volbě způsobu kvantizace při uložení do souboru a umožnuje
 například využít toho, že sousední bloky budou mít pravděpodobně blízkou
 barvu.
\end_layout

\begin_layout Standard
Další výhodou je mnohem rychlejší a jistější konvergence.
 Je vidět, že po každé iteraci mají všechny bloky 
\begin_inset Formula $R_{i}$
\end_inset

 správnou průměrnou barvu.
 Tím se vzhled zdrojových bloků 
\begin_inset Formula $D_{i}$
\end_inset

 už po první iteraci dostane blízko vzorovému obrázku, což se při další
 iteraci promítne do cílových bloků 
\begin_inset Formula $R_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
Ve
\begin_inset space ~
\end_inset

výše odkazovaných publikacích je ukázáno, že po takovéto úpravě barevných
 zobrazení iterační proces konverguje ke stejnému výsledku a také, že za
 trochu silnějších předpokladů než zde uvedené bude potřebný počet iterací
 malý a bude záviset pouze na velikostech zdrojových a cílových bloků.
 Používá se zde diskrétní model obrázku
\begin_inset space ~
\end_inset

--- posloupnost reálných čísel, kde cílové bloky jsou tvořeny 
\begin_inset Formula $2^{b_{i}}$
\end_inset

 po sobě jdoucími hodnotami a zdrojové bloky o
\begin_inset space ~
\end_inset

velikosti 
\begin_inset Formula $2^{d_{i}}$
\end_inset

 jsou tvořeny několika po sobě jdoucími cílovými bloky.
 Zmenšování bloků vždy probíhá zprůměrováním 
\begin_inset Formula $2^{d_{i}-b_{i}}$
\end_inset

 po sobě jdoucích hodnot.
\end_layout

\begin_layout Standard
Na rozdíl od konvergence založené na kolážové větě je důkaz proveden bez
 jakéhokoliv omezení na kontraktivitu barevných zobrazení 
\begin_inset Formula $\bar{c_{i}}$
\end_inset

, což umožnuje mnohem přesnější aproximaci bloků s
\begin_inset space ~
\end_inset

ostrými přechody bez ztráty jistoty konvergence.
 Zde se naopak využívá kontraktivity transformací 
\begin_inset Formula $w_{i}$
\end_inset

.
\end_layout

\begin_layout Subsection
Úprava lineárních koeficientů
\begin_inset CommandInset label
LatexCommand label
name "PIFS/Použitý_model"

\end_inset


\end_layout

\begin_layout Standard
Podobným způsobem, jako byly konstantní koeficienty barevných zobrazení
 nahrazeny průměry, lze také lineární koeficienty nahradit směrodatnými
 odchylkami
\begin_inset space ~
\end_inset

--- barvy zdrojových bloků jsou vyděleny svou směrodatnou odchylkou a vynásobeny
 cílovou směrodatnou odchylkou.
 Jak je rozebráno v
\begin_inset space ~
\end_inset

části 
\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení/Upravená"

\end_inset

, mírně se tím zvýší chyba optimálního zobrazení.
\end_layout

\begin_layout Standard
Výhody a nevýhody tohoto přístupu jsou podobné jako při nahrazování konstantních
 koeficientů zobrazení
\begin_inset space ~
\end_inset

--- především jednodušší reprezentace zobrazení a pravděpodobně také rychlejší
 konvergence.
\end_layout

\begin_layout Standard
Například v
\begin_inset space ~
\end_inset

článku 
\begin_inset CommandInset citation
LatexCommand cite
key "HuQK07"

\end_inset

 a také v
\begin_inset space ~
\end_inset

této práci je používán právě tento model barevných zobrazení, ale nikde
 se mi nepodařilo nalézt nějaké zdůvodnění nebo odkaz na text zabývající
 se jeho vlastnostmi.
 Nejsou mi tedy známy žádné výsledky týkající se konvergence ani pro případné
 omezené varianty.
\end_layout

\begin_layout Standard
Lineární koeficienty barevných zobrazení nejsou stejně jako v
\begin_inset space ~
\end_inset

předchozím modelu nijak omezeny, ale experimenty prováděné v
\begin_inset space ~
\end_inset

rámci této práce ukazují, že může být výhodné vyhýbat se zobrazením, kde
 je absolutní hodnota lineárního koeficientu vysoká.
 Tato úprava je diskutována v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení/Penalizace"

\end_inset

, včetně teoretického zdůvodnění.
\end_layout

\begin_layout Section
Nejčastější oblasti výzkumu
\end_layout

\begin_layout Standard
Především v
\begin_inset space ~
\end_inset

první polovině 90.
\begin_inset space \thinspace{}
\end_inset

let bylo věnováno fraktální kompresi velké úsilí.
 Bylo zkoumáno (většinou odděleně) mnoho odlišných způsobů vylepšení základních
 technik popsaných výše.
 V
\begin_inset space ~
\end_inset

této části jsou shrnuty nejvýznamnější výsledky a zajímavé návrhy pro další
 výzkum.
 Pro přehlednost jsou rozčleněny podle toho, na které aspekty komprese se
 zaměřují.
\end_layout

\begin_layout Subsection
Zrychlení komprese
\end_layout

\begin_layout Standard
Za největší problém byla považována obrovská výpočetní náročnost hledání
 vhodných zdrojových bloků.
 Od dob nejintenzivnějšího výzkumu v
\begin_inset space ~
\end_inset

oblasti se sice výkon běžných počítačů mnohonásobně zvýšil, ale stále je
 nutné se tímto problémem zabývat.
 Jedním z
\begin_inset space ~
\end_inset

důvodů je, že dnes je potřeba zpracovávat mnohem větší množství dat.
 Velikosti a množství fotografií roste a také je zkoumána možnost využití
 pro kompresi videozáznamů.
\end_layout

\begin_layout Subsubsection
Klasifikační metody
\end_layout

\begin_layout Standard
Nejčastější technikou pro urychlení výběru vhodného zdrojového bloku byly
 klasifikační metody.
 Všechny cílové a potencionální zdrojové bloky jsou nějakým způsobem ohodnoceny
 a poté je vzájemná zobrazitelnost přesně vyhodnocována pouze pro 
\begin_inset Quotes gld
\end_inset

kompatibilní
\begin_inset Quotes grd
\end_inset

 dvojice.
 To typicky vede k
\begin_inset space ~
\end_inset

vynechání některých optimálních zobrazení, ale pokles kvality bývá velmi
 malý a urychlení mnohonásobné (zkomprimovaná velikost se nezmění).
\end_layout

\begin_layout Standard
Většinou jde o
\begin_inset space ~
\end_inset

jednoduché rozdělení bloků do několika tříd a uvažování pouze zobrazení
 v rámci jedné třídy, například klasifikace navržené Jacquinem nebo Fisherem
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

.
 Zde je nevýhodné, že pro bloky 
\begin_inset Quotes gld
\end_inset

na
\begin_inset space ~
\end_inset

okrajích
\begin_inset Quotes grd
\end_inset

 tříd často mohou mít podobné bloky v
\begin_inset space ~
\end_inset

jiných 
\begin_inset Quotes gld
\end_inset

sousedních
\begin_inset Quotes grd
\end_inset

 třídách.
 To vede ke složitějším metodám, které hledají i v
\begin_inset space ~
\end_inset

příbuzných třídách, nebo používají hierarchické způsoby klasifikace, například
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Han07"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Převod na hledání nejbližšího bodu
\end_layout

\begin_layout Standard
Problémem klasifikačních metod je, že přes výrazné zrychlení nejsou schopny
 zlepšit asymptotickou složitost výpočtu.
 Zde se nabízí zobecnění klasifikačních metod, kde by pro blok byl vygenerován
 vektor z
\begin_inset space ~
\end_inset

nějakého prostoru uspořádaného tak, že vzdálenost v
\begin_inset space ~
\end_inset

něm odpovídá míře vzájemné zobrazitelnosti.
 Pak by pro každý bod prostoru odpovídající nějakému cílovému bloku stačilo
 hledat nejbližší z
\begin_inset space ~
\end_inset

množiny bodů prostoru odpovídající zdrojovým blokům.
 Hledání nejbližších sousedů je známá úloha, kterou už lze řešit výrazně
 rychleji než úměrně se součinem velikostí obou množin.
\end_layout

\begin_layout Standard
Tato možnost byla publikována mezi projekty v
\begin_inset space ~
\end_inset

knize
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

 a podrobněji rozebrána v
\begin_inset space ~
\end_inset

samostatném článku
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Saup95"

\end_inset

.
 Je zde především dokázáno, že při uvažování klasických afinních zobrazení
 pro transformaci barvy mezi bloky je pro pevný cílový blok optimální čtvercová
 chyba (SE) rovna určité rostoucí transformaci eukleidovské vzdálenosti
 normalizovaných vektorů obou bloků (cílového a zdrojového).
 Tedy pro nalezení zdrojového bloku 
\begin_inset Quotes gld
\end_inset

nejpodobnějšího
\begin_inset Quotes grd
\end_inset

 k
\begin_inset space ~
\end_inset

cílovému stačí jen najít nejbližší bod v
\begin_inset space ~
\end_inset

eukleidovském prostoru.
\end_layout

\begin_layout Standard
Jsou zde různé komplikace
\begin_inset space ~
\end_inset

--- kvůli kvantizaci koeficientů nemusí nejbližší bod být ten nejlepší,
 při uvažování i zobrazení se zápornými lineárními koeficienty je nutné
 prohledávát strukturu dvakrát (nebo vložit každý bod dvakrát).
 Je zde také otázka spotřeby paměti, která sice není tak velkým problémem,
 jako v
\begin_inset space ~
\end_inset

době publikace metody, ale stále potřeba se jí věnovat.
 Dále se problematikou zabýváme v
\begin_inset space ~
\end_inset

části
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Predikce"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Lokální prohledávání
\end_layout

\begin_layout Standard
Za další možnost urychlení se považoval jiný způsob redukce nutných porovnání
\begin_inset space ~
\end_inset

--- přeskočení zdrojových bloků, které jsou v
\begin_inset space ~
\end_inset

obrázku příliš vzdálené od cílového bloku (pro který hledáme zobrazení).
 Na rozdíl od klasifikačních metod je množina uvažovaných zdrojových bloků
 zřejmá už z
\begin_inset space ~
\end_inset

polohy cílového bloku, takže lze ušetřit nějaký prostor nutný pro uložení
 jejich identifikačních čísel.
\end_layout

\begin_layout Standard
Základem této techniky je domněnka, že ideální zdrojový blok má větší pravděpodo
bnost výskytu blíže k
\begin_inset space ~
\end_inset

danému cílovému bloku.
 V
\begin_inset space ~
\end_inset

kapitole 3 knihy
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

 je ukázáno, že posun rozdělení vzdáleností optimálních dvojic oproti vzdálenost
em náhodně vybraných dvojic je zanedbatelný.
 Zrádné je zde především to, že už jen rozdělení vzdálenosti dvou náhodných
 bodů je velmi nerovnoměrné.
\end_layout

\begin_layout Standard
Jsou zde i
\begin_inset space ~
\end_inset

další nevýhody spojené s
\begin_inset space ~
\end_inset

tím, že je množina uvažovaných zdrojových bloků pro každý cílový blok jiná,
 například obtížná kombinace s
\begin_inset space ~
\end_inset

jinými metodami urychlení komprese.
\end_layout

\begin_layout Standard
Na druhou stranu například v
\begin_inset space ~
\end_inset

nedávném článku
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "HuQK07"

\end_inset

 je zkoumána závislost podobnosti dvou cílových bloků na jejich vzdálenosti
 s
\begin_inset space ~
\end_inset

opačnými výsledky na stejném obrázku (Lenna).
 To je pravděpodobně způsobeno tím, že při hledání podobnosti mezi zdrojovým
 a cílovým blokem vždy dochází ke zmenšování, zatímco blízké cílové bloky
 často mívají stejnou velikost.
\end_layout

\begin_layout Standard
Této podobnosti je zde využito nejen pro urychlení hledání zdrojového bloku
 tím, že jsou nejprve vyzkoušeny zdrojové bloky blízkých cílových bloků,
 ale hlavně ke zvýšení kompresního poměru.
 Místo ukládání identifikačního čísla zdrojového bloku stačí uložit relativní
 pozici nejbližšího cílového bloku se stejným zdrojovým blokem.
 Vzhledem k
\begin_inset space ~
\end_inset

tomu, že cílových bloků bývá mnohem méně než zdrojových a podobné cílové
 bloky se často vyskytují blízko, lze takto ušetřit mnoho bitů ve výstupu
 za cenu minimálního poklesu kvality.
\end_layout

\begin_layout Subsubsection
Přerušení prohledávání
\end_layout

\begin_layout Standard
Další metoda snížení počtu nutných porovnání je nehledat nejlepší zdrojový
 blok a spokojit se s
\begin_inset space ~
\end_inset

dostatečně dobrým už nalezeným blokem.
 Dosažené zrychlení ale nejspíš nebude nijak veliké.
 Nejsou mi známy žádné práce, které by se podrobněji zabývaly touto technikou.
\end_layout

\begin_layout Subsection
Zlepšení vhledu
\end_layout

\begin_layout Standard
Vetšinou nezávisle na rychlosti komprese byly zkoumány také metody zlep\SpecialChar \-
šu\SpecialChar \-
jící
 kvalitu dekomprimovaných obrázků.
 Zde jsou zařazeny i techniky zvyšující kompresní poměr, protože jde o
\begin_inset space ~
\end_inset

stejný cíl
\begin_inset space ~
\end_inset

--- typicky lze pouhým nastavováním parametrů komprese zlepšovat jeden z
\begin_inset space ~
\end_inset

těchto ukazatelů na úkor druhého.
\end_layout

\begin_layout Subsubsection
Dělení na cílové bloky
\end_layout

\begin_layout Standard
Jedním ze základních faktorů ovlivňujících vzhled je způsob dělení obrázku
 na cílové bloky.
 Nejjednodušší je určit dělení napevno.
 To je ale v
\begin_inset space ~
\end_inset

praxi nepoužitelné kvůli obtížné regulaci kvality a kompresního poměru.
 Navíc nalézt dobré zobrazení pro skoro konstatní bloky je velmi jednoduché,
 zatímco pro bloky obsahující hodně detailů nejspíš žádný vhodný zdrojový
 blok k
\begin_inset space ~
\end_inset

dispozici nebude.
 Proto bylo nutné hledat adaptivní metody, které by v
\begin_inset space ~
\end_inset


\begin_inset Quotes gld
\end_inset

plochých
\begin_inset Quotes grd
\end_inset

 místech nechávaly velké bloky a v
\begin_inset space ~
\end_inset

místech se složitější kresbou mohly dělit obrázek na menší a zvyšovat u
\begin_inset space ~
\end_inset

nich tak pravděpodobnost nalezení dostatečně dobrého zobrazení.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Jednoznačně nejpoužívanější metodou je dělení pomocí čtyřstromu (Quadtree),
 popsaného například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

, kapitola 3.
 Pro zjednodušení se uvažují jako velikosti obrázku a bloků jen čtverce
 o
\begin_inset space ~
\end_inset

hranách délky mocniny 2.
 Začne se s
\begin_inset space ~
\end_inset

jedním velkým cílovým blokem pokrývajícím celý obrázek a postupuje se tak,
 že se vždy vezme nějaký cílový blok a najde se pro něj nejlepší zobrazení.
 Pokud je chyba dostatečně malá, je zobrazení použito, jinak je blok rozdělen
 na čtyři o
\begin_inset space ~
\end_inset

poloviční velikosti, pro které se použije stejný postup.
\end_layout

\begin_layout Standard
Tento způsob dělení je celkem efektivní a také jednoduchý na implementaci,
 včetně velmi úsporného uložení tvaru čtyřstromu.
 Pro použití v
\begin_inset space ~
\end_inset

praxi je potřeba čtyřstrom zobecnit i pro jiné velikosti obrázku a jsou
 vhodná i další vylepšení.
 Podrobněji je dělení čtyřstromem rozebráno v
\begin_inset space ~
\end_inset

části
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/MQuadTree"

\end_inset

.
\end_layout

\begin_layout Standard
Jednou z
\begin_inset space ~
\end_inset

nevýhod čtyřstromu je, že skoky mezi jednotlivými velikostmi bloků jsou
 relativně velké, takže v
\begin_inset space ~
\end_inset

některých případech dochází k
\begin_inset space ~
\end_inset

dělení na zbytečně malé bloky.
 Tento problém je řešen v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "OnCC01"

\end_inset

 pomocí přidání jednoho mezikroku, což sice vede k
\begin_inset space ~
\end_inset

delšímu výpočtu, ale také mírně zlepšuje kvalitu komprimovaných obrázků.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Zobecněním dělení čtyřstromem je HV (horizontálně-vertikální) dělení, popsané
 v 6.
\begin_inset space \thinspace{}
\end_inset

kapitole knihy
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

.
 Základní myšlenka je stejná jako u
\begin_inset space ~
\end_inset

čtyř\SpecialChar \-
stro\SpecialChar \-
mů, akorát umožňuje dělit obecné obdelníkové bloky na dva menší
 podle libovolné svislé nebo vodorovné přímky.
\end_layout

\begin_layout Standard
To také vede k
\begin_inset space ~
\end_inset

menším skokům mezi velikostmi bloků, ale hlavní výhoda je ve vyšší adaptivitě.
 V
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

 je navržena heuristická metoda, která vybírá místo dělení nejčastěji těsně
 u
\begin_inset space ~
\end_inset

silných barevných zlomů a zároveň se vyhýbá blokům s
\begin_inset space ~
\end_inset

příliš velkým poměrem délek stran.
 To zvyšuje pravděpodobnost nalezení vhodného zdrojového bloku a vyvažuje
 tak větší složitost uložení struktury rozdělení obrázku.
\end_layout

\begin_layout Standard
Podle autorů dává metoda o
\begin_inset space ~
\end_inset

něco lepší výsledky než klasický čtyřstrom, ale komplikuje ostatní fáze
 komprese.
 Protože cílové bloky mohou mít libovolné obdelníkové tvary, je mnohem těžší
 použití klasifikačních a jiných urychlujících metod.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Další typy dělení zmiňované v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

, například trojúhelníkové, polygonální, nebo šestiúhelníkové
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
toto dělení na rozdíl od šestiúhelníkové architektury zmíněné níže pracuje
 s
\begin_inset space ~
\end_inset

klasickými čtvercovými pixely, jen zdrojové bloky mají přibližně tvar šestiúheln
íků
\end_layout

\end_inset

 jsou velmi komplikované na implementaci a pravděpodobně by nepřinesly významné
 zlepšení kvality.
 Mezi jejich předpokládané výhody ale patří méně 
\begin_inset Quotes gld
\end_inset

blokovitý
\begin_inset Quotes grd
\end_inset

 vhled způsobený dělením podle šikmých nebo různě orientovaných hran, případně
 mírným překryvem pixelů na krajích bloků.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dělení na nezávisle zobrazované bloky vytváří rušivou strukturu, jejíž redukcí
 je možné výrazně zlepšit subjektivní vzhled a někdy i PSNR komprimovaného
 obrázku.
 Problémem je vysoká citlivost lidského na hrany, obzvláště horizontálně
 a vertikálně orientované.
 Pro potlačení této struktury lze dělat zásahy na dvou různých místech celého
 kompresního procesu.
\end_layout

\begin_layout Standard
Nejjednodušší možnost je věnovat se tomuto problému až při dekódování.
 Hranice bloků jsou vždy známé, takže je možné vyhlazovat výsledný obrázek
 jen na jejich okrajích.
 Vizuálního zlepšení lze dosáhnout už použitím jednoduchých nebo vážených
 průměrů 
\begin_inset CommandInset citation
LatexCommand cite
key "Aoue04,Fish95"

\end_inset

.
 U obrázků s
\begin_inset space ~
\end_inset

vyšším kompresním poměrem a také u jednotlivých větších cílových bloků je
 větší potřeba vyhlazování a obvykle dojde i ke zvýšení PSNR, ale naopak
 při nastavení vysoké kvality po vyhlazování PSNR klesne (přestože obrázek
 často 
\begin_inset Quotes gld
\end_inset

vypadá lépe
\begin_inset Quotes grd
\end_inset

).
\end_layout

\begin_layout Standard
Další možností je snažit se redukovat tyto přechody už při kompresi.
 Zde mi nejsou známy žádné publikované výsledky kromě návrhů způsobů řešení.
 Lze vážit chybu na okrajích cílových bloků více než chybu uvnitř, případně
 použít dělení na překrývající se bloky a při dekódování hodnoty na překryvu
 kombinovat.
\end_layout

\begin_layout Subsubsection
Zdrojové bloky
\end_layout

\begin_layout Standard
Dalším faktorem ovlivňujícím vzhled je volba souboru zdrojových bloků.
 Důležitý je především počet bloků v
\begin_inset space ~
\end_inset

souboru.
 Zvýšení počtu sice vede k
\begin_inset space ~
\end_inset

potřebě většího prostoru na uložení identifikačních čísel zdrojových bloků,
 ale také zvyšuje pravděpodobnost nalezení vhodného bloku, takže lze při
 stejné kvalitě použít rozdělení obrázku na menší počet větších cílových
 bloků.
\end_layout

\begin_layout Standard
Výsledky testování (například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Saup95,Fish95"

\end_inset

) ukazují, že zvyšování množství zdrojových bloků typicky vede ke zlepšení
 kvality.
 Nevýhodou je vyšší výpočetní náročnost.
 Zde se ukazuje spojitost se zrychlením komprese
\begin_inset space ~
\end_inset

--- při vyšší rychlosti by bylo únosné prohledat větší soubor bloků a zlepšit
 tak kvalitu (případně kompresní poměr).
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Kromě množství zdrojových bloků je potřeba rozhodnout, jak zdrojové bloky
 vybírat.
 Základní podmínkou je, že musí být větší než příslušné cílové bloky, aby
 byla prostorová část zobrazení kontraktivní.
 Ekvivalentně lze uvažovat výběr zdrojových bloků stejně velkých jako příslušné
 cílové z
\begin_inset space ~
\end_inset

nějaké zmenšeniny původního obrázku.
 To je díky své obecnosti někdy výhodné i pro implementaci (využito také
 v
\begin_inset space ~
\end_inset

této práci).
\end_layout

\begin_layout Standard
Samotné zmenšování lze provádět mnoha různými způsoby.
 Kvůli jednoduché implementaci se nejčastěji používá především zmenšování
 v
\begin_inset space ~
\end_inset

obou rozměrech na polovinu (průměrováním hodnot po čtveřicích) a navíc se
 uvažuje všech osm transformací čtverce složených ze
\begin_inset space ~
\end_inset

symetrií a otáčení o
\begin_inset space ~
\end_inset

násobky 
\begin_inset Formula $90^{\circ}$
\end_inset

.
 V
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Aoue04"

\end_inset

 je navíc zkoumáno použití zmenšování s
\begin_inset space ~
\end_inset

kontraktivitou rozdílnou pro obě osy nebo s
\begin_inset space ~
\end_inset

přidáním otočení o
\begin_inset space ~
\end_inset


\begin_inset Formula $45^{\circ}$
\end_inset

 s
\begin_inset space ~
\end_inset

nejasnými výsledky.
 Tyto myšlenky byly také využity při implementaci (část
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Domény"

\end_inset

).
\end_layout

\begin_layout Standard
Podle
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Saup96"

\end_inset

 přidávání osmi transformací čtverce nijak nezlepšuje kvalitu, ale může
 sloužit spíše jako způsob zvětšování počtu zdrojových bloků.
 V
\begin_inset space ~
\end_inset

takto zvětšeném souboru bloků je často pak možné dosáhnout úspory paměti
 a zrychlení oproti jiným způsobům zvětšování souboru.
\end_layout

\begin_layout Subsubsection
Šestiúhelníková architektura
\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

poslední době je zkoumáno také pojetí obrázku jako bodů uspořádaných do
 šestiúhelníkové mříže místo čtvercové.
 Tato architektura mnohem lépe odpovídá rozložení tyčinek a čípků na sítnici
 oka a také vede k
\begin_inset space ~
\end_inset

přirozené redukci horizontálních a vertikálních artefaktů.
 Další výhodou je větší množství přirozených rotací na mříži.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Protože běžné formáty obrázků podporují pouze obdélníkový tvar se
\begin_inset space ~
\end_inset

čtvercovými body, je potřeba nejprve stanovit způsob převodu mezi mřížemi.
 Objevují se dva různé přístupy.
 První možnost je představit si čtvercovou mříž o
\begin_inset space ~
\end_inset


\begin_inset Formula $60^{\circ}$
\end_inset

 zkosenou, tím se středy pixelů dostanou právě do pravidelné šestiúhelníkové
 mříže a je možné je převádět 
\begin_inset Formula $1:1$
\end_inset

 (například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ThKa07"

\end_inset

).
 Druhou možností je body přepočítat pomocí váženého průměrování, například
 metodou ukázanou v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "HWWHH06"

\end_inset

.
\end_layout

\begin_layout Standard
Výhoda prvního přístupu oproti druhému je, že zobrazuje právě jeden čtvercový
 pixel na jeden šestiúhelníkový, takže nedochází k žádnému rozmazávání.
 Na druhou stranu se v
\begin_inset space ~
\end_inset

podstatě pracuje se zkoseným obrázkem, takže interpretace vzdáleností bude
 v
\begin_inset space ~
\end_inset

různých směrech různě změněna, což může vést k
\begin_inset space ~
\end_inset

nerovnoměrným projevům zkreslení způsobeného kompresí.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Změna architektury také přináší mnoho otázek a implementačních problémů.
 Po libovolném převodu obdélníkového obrázku budou v
\begin_inset space ~
\end_inset

šestiúhelníkové mříži 
\begin_inset Quotes gld
\end_inset

díry
\begin_inset Quotes grd
\end_inset

 neobvyklých tvarů nebo nepravidelné okraje a už samotný způsob reprezentace
 mříže v
\begin_inset space ~
\end_inset

paměti je netriviální.
 Ve zmíněných článcích jsou tyto potíže řešeny kompresí pouze části obrázku
 o
\begin_inset space ~
\end_inset

vhodném tvaru, ale ani tak zde dosažené výsledky nejsou přesvědčivé.
\end_layout

\begin_layout Subsubsection
Zpracování barev
\end_layout

\begin_layout Standard
Ve většině případů je fraktální komprese zkoumána pouze na obrázcích ve
 stupních šedi s
\begin_inset space ~
\end_inset

argumentem, že barevné obrázky lze snadno komprimovat jako tři nezávislé
 jednobarevné.
 Je ale zřejmé, že RGB není vhodný model pro kompresi obrazu, protože jsou
 jeho složky vzájemně silně závislé.
\end_layout

\begin_layout Standard
Nejjednodušší je použít některý z
\begin_inset space ~
\end_inset

barevných prostorů navržených pro tyto účely, například YCbCr nebo L*a*b*
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "wiki:Lab"

\end_inset

.
 Toto je standardní řešení v
\begin_inset space ~
\end_inset

mnoha jiných metodách komprese obrazu.
 V
\begin_inset space ~
\end_inset

závislosti na použitém modelu může být vhodné navíc upravit nastavení kvality
 komprese jednotlivých složek, protože citlivost oka na různé barvy se liší.
 Ve formátech založených na standardu JPEG se dokonce u
\begin_inset space ~
\end_inset

barevných složek snižuje rozlišení, ale ve fraktální kompresi je mnohem
 výhodnější rozlišení ponechat a snížit kvalitu, protože zde výhody oproti
 JPEGu rostou s
\begin_inset space ~
\end_inset

kompresním poměrem (experimenty, například v
\begin_inset space ~
\end_inset

příloze
\begin_inset space ~
\end_inset

D knihy
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

, jasně ukazují, že fraktální komprese nejsnáze překonává JPEG při extrémních
 kompresních poměrech).
\end_layout

\begin_layout Standard
Alternativně lze spočítat vlastní barevný prostor pro konkrétní obrázek.
 Budeme pro jednoduchost uvažovat jen změnu báze vektorového prostoru, charakter
izovanou maticí velikosti 
\begin_inset Formula $3\times3$
\end_inset

 (barva pixelu v
\begin_inset space ~
\end_inset

RGB prostoru je prvkem 
\begin_inset Formula $\mathbb{R}^{3}$
\end_inset

).
 Zde lze použít metodu zvanou PCA (principal component analysis), známou
 také jako KLT (Karhunen–Loève transform).
 Metoda nalezne nejlepší ortonormální bázi z
\begin_inset space ~
\end_inset

hlediska soustředění maxima informace (rozptylu) do minima souřadnic.
 Transformační matice je dána vlastními vektory kovariační matice a navíc
 příslušná vlastní čísla charakterizují důležitost jednotlivých souřadnic.
\begin_inset Foot
status open

\begin_layout Plain Layout
PCA samotnou lze použít ke kompresi obázků tak, že se obrázek rozdělí na
 bloky a s
\begin_inset space ~
\end_inset

kaž\SpecialChar \-
dým z
\begin_inset space ~
\end_inset

nich se pracuje jako s
\begin_inset space ~
\end_inset

vektorem.
 Po náročném výpočtu pak vznikne transformace, v
\begin_inset space ~
\end_inset

praxi často velmi podobná diskrétní kosinové transformaci.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Je možné také volit jiné přístupy ke zpracování barev.
 V
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ThKa06"

\end_inset

 je předvedena metoda, která pomocí čtyřstromu dělí barevný obrázek na bloky
 (podobně jako při dělení cílových bloků) dokud nejsou barvy v
\begin_inset space ~
\end_inset

blocích dostatečně korelované.
 Parametry korelace barev pro každý z
\begin_inset space ~
\end_inset

bloků jsou uloženy a do dalšího kódování postupuje již jen jeden obrázek
 ve stupních šedi.
 Zde je výhoda v
\begin_inset space ~
\end_inset

adaptivní kompresi informací o
\begin_inset space ~
\end_inset

barvě a také v
\begin_inset space ~
\end_inset

urychlení díky tomu, že se složité metody fraktální komprese použijí jen
 na jeden jednobarevný obrázek, přestože většina vnímané informace bude
 obsažena právě v
\begin_inset space ~
\end_inset

něm.
\end_layout

\begin_layout Subsubsection
Další metody
\begin_inset CommandInset label
LatexCommand label
name "Články/Zlepšení_vzhledu/Další_metody"

\end_inset


\end_layout

\begin_layout Standard
Zde ještě ještě stručně zmíněno několik dalších metod používaných pro zlepšení
 vzhledu komprimovaných obrázků.
\end_layout

\begin_layout Standard
Obzvláště při vysokých kompresních poměrech je výhodné počítat chybu zobrazení
 ze zdrojových bloků do cílových s
\begin_inset space ~
\end_inset

použitím kvantizovaných parametrů zobrazení místo teoretických optim (tedy
 z
\begin_inset space ~
\end_inset

hodnot dostupných při dekompresi místo hodnot dostupných při kompresi).
 Aby šlo metodu použít, je potřeba se omezit jen na některé způsoby kvantizace
 a také výpočet této chyby bývá trochu složitější.
\end_layout

\begin_layout Standard
Jak již bylo zmíněno, RMSE metrika pro větší bloky nepopisuje dobře vnímaný
 rozdíl.
 Použití přesnějších metrik bylo zatím věnováno jen velmi málo pozornosti,
 především díky jednoduchosti práce s
\begin_inset space ~
\end_inset

RMSE umožnující relativně rychlou implementaci jejího vyhodnocení.
 Vhodností jiných metrik pro fraktální kompresi se zabývá například
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "AbateNR07"

\end_inset

.
\end_layout

\begin_layout Standard
PIFS uvažuje afinní zobrazení z
\begin_inset space ~
\end_inset

jednoho zdrojového bloku do jednoho cílového bloku.
 To lze zobecnit na hledání zobrazení z
\begin_inset space ~
\end_inset

dvou nebo více zdrojových bloků.
 Víceprůchodové komprese, kde se jednoduše kóduje chyba předchozího kroku,
 nedávají lepší výsledky.
 Přímé hledání zobrazení z
\begin_inset space ~
\end_inset

více zdrojových bloků ke zlepšení kvality výsledku vede, ale množství kombinací
 zde roste ještě mnohem rychleji než v
\begin_inset space ~
\end_inset

klasické PIFS kompresi.
 Například v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "EuOn06"

\end_inset

 je navrženo snižovat složitost pomocí redukce podobných zdrojových bloků
 a použití hladového přístupu.
\end_layout

\begin_layout Subsection
Jiná vylepšení
\end_layout

\begin_layout Subsubsection
Rychlost dekomprese
\end_layout

\begin_layout Standard
Fraktální dekomprese bývá považována za velmi rychlou, což je způsobeno
 srovnáváním s
\begin_inset space ~
\end_inset

kompresní fází.
 Ve
\begin_inset space ~
\end_inset

skutečnosti se stále vyplatí pracovat na jejím zrychlení.
 Při prvních iteracích zobrazení je obrázek složen z
\begin_inset space ~
\end_inset

jednolitých bloků a je tedy zbytečné pracovat v
\begin_inset space ~
\end_inset

plném rozlišení.
\end_layout

\begin_layout Standard
Jak je uvedeno v
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Fish95"

\end_inset

, stačí začít dekompresi na zmenšeném obrázku, kde nejmenší cílové bloky
 zabírají jediný pixel, a po každé iteraci zobrazení pak zvětšit obrázek
 na dvojnásobek (efektivní především při dělení čtyřstromem).
 V
\begin_inset space ~
\end_inset

plné velikosti pak stačí udělat jen okolo dvou iterací.
\end_layout

\begin_layout Subsubsection
Progresivní dekódování
\end_layout

\begin_layout Standard
Při praktickém využití je důležitá možnost progresivního dekódování obrázků
\begin_inset space ~
\end_inset

--- generování náhledů s
\begin_inset space ~
\end_inset

použitím pouze malé počáteční části souboru.
 To je užitečné především na internetových stránkách, nebo při prohlížení
 adresářů s
\begin_inset space ~
\end_inset

velkým množstvím fotografií.
 Progresivním dekódováním pro klasický PIFS se zabývá
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "WWHH06"

\end_inset

.
\end_layout

\begin_layout Standard
Při použití modifikací nahrazující konstantní koeficienty barevných zobrazení
 průměrnými barvami cílových bloků lze ale postupovat mnohem efektivněji
\begin_inset space ~
\end_inset

--- uložit nejprve způsob rozdělení na bloky (zabere velmi málo místa),
 potom průměrné barvy všech cílových bloků a pak až ostatní parametry.
 Tím lze generovat z
\begin_inset space ~
\end_inset

velmi malé části souboru náhled jen z
\begin_inset space ~
\end_inset

průměrných barev bloků, který může vypadat relativně dobře, obzvláště pokud
 se pro zobrazení použijí pokročilé interpolační metody.
\end_layout

\begin_layout Subsection
Využití technik fraktální komprese pro jiné účely
\end_layout

\begin_layout Standard
Fraktální komprese má velmi zajímavé vlastnosti, které lze využít i pro
 další, často velmi odlišné, účely.
 V této části budou nějdůležitějších z
\begin_inset space ~
\end_inset

nich zmíněny, ale jen velmi stručně a bez odkazů na zdroje.
\end_layout

\begin_layout Standard
Díky možnosti dekódování v
\begin_inset space ~
\end_inset

libovolném rozlišení lze použít fraktální kompresi pro inteligentní zvětšování
 obrázků.
 Při správném nastavení dává velmi dobré výsledky díky tomu, že zvětšenina
 nepůsobí rozmazaným dojmem a ostré hrany jsou výborně zachovány.
\end_layout

\begin_layout Standard
Z
\begin_inset space ~
\end_inset

podobných důvodů lze fraktální kompresi použít i pro čištění obrázků od
 šumu.
 Při kontraktivních zobrazeních mezi bloky se totiž šum velmi potlačí a
 proto nelze typicky najít zdrojový blok, který by šum v
\begin_inset space ~
\end_inset

cílovém bloku napodobil.
 Větší útvary a ostré hrany se naopak většinou podaří mezi zdrojovými bloky
 najít, takže zůstanou zachovány.
\end_layout

\begin_layout Standard
Je také zkoumáno přidávání 
\begin_inset Quotes gld
\end_inset

vodoznaků
\begin_inset Quotes grd
\end_inset

 do obrázků pomocí fraktální komprese.
 Ty mají velmi zajímavé vlastnosti
\begin_inset space ~
\end_inset

--- nejsou vidět (ale lze je z
\begin_inset space ~
\end_inset

obrázku extrahovat) a jsou velmi odolné proti ořezávání obrázku, JPEG kompresi
 a jiným pokusům o
\begin_inset space ~
\end_inset

odstranění.
\end_layout

\begin_layout Standard
Dále je diskutována možnost využití technik fraktální komprese pro videonahrávky.
 Největší redundance je zde v
\begin_inset space ~
\end_inset

podobnosti mezi po sobě následujícími snímky.
 V
\begin_inset space ~
\end_inset

klasických metodách se používají bloky některých snímků jako predikce stejně
 umístěných (případně trochu posunutých) bloků jiných snímků a kóduje se
 jen rozdíl.
 Stejnou metodu lze využít i při fraktální kompresi, ale nabízí se mnohem
 přirozenější rozšíření.
 Stačí k
\begin_inset space ~
\end_inset

dvoudimenzionálnímu prostoru pixelů v
\begin_inset space ~
\end_inset

obrázcích přidat třetí dimenzi tvořenou časem.
 Potom videozáznam dělený na 
\begin_inset Quotes gld
\end_inset

kvádry
\begin_inset Quotes grd
\end_inset

 místo obdélníků lze komprimovat podobným způsobem jako obrázky pomocí zobrazení
 mezi trojdimenzionálními bloky.
 Zde je zajímavá například možnost dekódování ve vyšším rozlišení
\begin_inset space ~
\end_inset

--- lze tak generovat rozumné mezisnímky, které v
\begin_inset space ~
\end_inset

původní nahrávce nebyly.
\end_layout

\begin_layout Chapter
Chyba zobrazení mezi bloky 
\begin_inset CommandInset label
LatexCommand label
name "Chyba_zobrazení"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
přidat RMSE, PSNR, ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

této kapitole je rozebrána nejdůležitější část komprese
\begin_inset space ~
\end_inset

--- výpočet chyby optimálního zobrazení mezi dvojicí bloků.
 
\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

následujících výpočtech budeme pro zjednodušení pracovat se zdrojovým blokem,
 který je už zmenšen na velikost cílového a správně otočen.
 Navíc použijeme diskrétní model obrázku, přestože analogická odvození lze
 udělat i se spojitým modelem.
 Protože zde pracujeme s
\begin_inset space ~
\end_inset

RMSE metrikou, nehraje tvar bloků žádnou roli.
 Bloky budou uvažovány jako jednorozměrné vektory hodnot, indexované tak,
 aby sobě odpovídající hodnoty zdrojových a cílových bloků měly stejné indexy
 (ovlivněno rotacemi).
 Hodnoty 
\begin_inset Formula $i$
\end_inset

-tého pixelu zdrojového a cílového bloku budeme značit 
\begin_inset Formula $d_{i}$
\end_inset

 a 
\begin_inset Formula $r_{i}$
\end_inset

, kde index 
\begin_inset Formula $i$
\end_inset

 je z
\begin_inset space ~
\end_inset

rozsahu 
\begin_inset Formula $\left\{ 1,2,\ldots,n\right\} $
\end_inset

.
\end_layout

\begin_layout Standard
Je potřeba si uvědomit, že zde jsou počítané odchylky mezi původním obrázkem
 a jeho obrazem, přestože ve skutečnosti potřebujeme omezit odchylku obrázku
 od pevného bodu zobrazení.
 V
\begin_inset space ~
\end_inset

části
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "PIFS"

\end_inset

 byla diskutována možnost použití kolážové věty, která skutečnou chybu omezuje,
 ale v
\begin_inset space ~
\end_inset

praxi je nepoužitelná.
 Hlavním důvodem je to, že dává příliš volný odhad, který neodpovídá realitě
 a také je nepříjemné, že plnění předpokladu kontraktivity barevných zobrazení
 výslednou odchylku výrazně zvětšuje.
\end_layout

\begin_layout Section
Chybové metriky
\end_layout

\begin_layout Standard
Ve fraktální kompresi se používá několik ukazatelů míry odchylky obrázku
 od originálu, které jsou vzájemně velmi provázané.
 Výpočty vycházejí z
\begin_inset space ~
\end_inset


\begin_inset Formula $e_{i}$
\end_inset


\begin_inset space ~
\end_inset

--- rozdílů hodnot jednotlivých pixelů (uvažujeme jednobarevný obrázek).
\end_layout

\begin_layout Standard
Pro výpočty je velmi vhodná SE (
\emph on
square error
\emph default
) metrika měřící čtvercovou chybu.
\begin_inset Formula \[
\mathrm{SE}=\sum_{i=1}^{n}e_{i}^{2}\]

\end_inset

Někdy se používá její normalizovaná verze, která umožňuje korektní porovnávání
 odchylek naměřených na různě velkých obrázcích.
 Rozsah RMSE (
\emph on
root mean square error
\emph default
) je vždy stejný jako rozsah hodnot pixelů.
 
\begin_inset Formula \[
\mathrm{RMSE}=\sqrt{\frac{\mathrm{SE}}{n}}\]

\end_inset

Pro porovnávání různých metod je vhodnějším měřítkem PSNR kvalita (
\emph on
peak signal-to-noise ratio
\emph default
), protože je nezávislá na rozsahu hodnot pixelů a je v
\begin_inset space ~
\end_inset

logaritmickém měřítku.
 Hodnoty se měří v
\begin_inset space ~
\end_inset

decibelech a jsou v
\begin_inset space ~
\end_inset

rozsahu nula až nekonečno, kde nekonečno odpovídá nulové odchylce.
 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathrm{PSNR}=-20\log_{10}\frac{\mathrm{RMSE}}{M},\mbox{\quad kde hodnoty pixelů jsou z\, rozsahu 0--\ensuremath{M}}\]

\end_inset


\end_layout

\begin_layout Section
Klasický model
\begin_inset CommandInset label
LatexCommand label
name "Chyba_zobrazení/Klasická"

\end_inset


\end_layout

\begin_layout Standard
Při klasické fraktální kompresi je chyba zobrazení dána
\begin_inset Formula \[
\mathrm{SE}=\sum_{i=1}^{n}\left(ud_{i}+v-r_{i}\right)^{2}\]

\end_inset

přičemž uvažujeme minimum pro libovolné konstanty 
\begin_inset Formula $u$
\end_inset

 a 
\begin_inset Formula $v$
\end_inset

.
 Úloha odpovídá lineární regresi používané ve statistice, kde RMSE metrika
 dává volbu koeficientů metodou nejmenších čtverců.
 Použitím derivací a řešením jednoduché soustavy rovnic
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
rozsahy u
\begin_inset space ~
\end_inset

sum jsou dále vynechány, protože jsou vždy stejné a zbytečně by výpočty
 znepřehled
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
ňovaly
\end_layout

\end_inset


\begin_inset Formula \begin{eqnarray*}
{\textstyle 2u\sum d_{i}^{2}+2v\sum d_{i}-2\sum r_{i}d_{i}} & = & 0\\
{\textstyle 2u\sum d_{i}+2nv-2\sum r_{i}} & = & 0\end{eqnarray*}

\end_inset

lze spočítat obecné optimální hodnoty koeficientů
\begin_inset Formula \[
\hat{u}=\frac{n\sum r_{i}d_{i}-\left(\sum d_{i}\right)\left(\sum r_{i}\right)}{n\sum d_{i}^{2}-\left(\sum d_{i}\right)^{2}},\qquad\hat{v}=\frac{\left(\sum d_{i}^{2}\right)\left(\sum r_{i}\right)-\left(\sum d_{i}\right)\left(\sum r_{i}d_{i}\right)}{n\sum d_{i}^{2}-\left(\sum d_{i}\right)^{2}}\]

\end_inset

Jmenovatele jsou nulové právě když má zdrojový blok konstantní barvu, což
 je případ vyloučený například i proto, že chyba zobrazení nemůže být lepší
 než s
\begin_inset space ~
\end_inset

libovoným jiným zdrojovým blokem.
 Díky tomu, že matice druhých parciálních derivací
\begin_inset Formula \[
\left(\begin{array}{cc}
2\sum d_{i}^{2} & 2\sum d_{i}\\
2\sum d_{i} & 2n\end{array}\right)\]

\end_inset

je pozitivně definitní pro libovolný nekonstantní zdrojový blok, jedná se
 o
\begin_inset space ~
\end_inset

jediné minimum.
 Zpětným dosazením optimálních parametrů do vzorce pro chybu a úpravou získáme
 optimální chybu
\begin_inset Formula \[
\widehat{SE}=\frac{\left(\sum r_{i}d_{i}\right)\left[2\left(\sum d_{i}\right)\left(\sum r_{i}\right)-n\sum r_{i}d_{i}\right]-\left(\sum d_{i}^{2}\right)\left(\sum d_{i}\right)^{2}}{n\sum d_{i}^{2}-\left(\sum d_{i}\right)^{2}}+\sum r_{i}^{2}\]

\end_inset

Pomocí struktur uvedených v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Matice"

\end_inset

 lze všechny sumy kromě jedné snadno spočítat.
 Součet 
\begin_inset Formula $\sum r_{i}d_{i}$
\end_inset

 je nutné vyčíslit pro každou uvažovanou dvojici bloků zvlášť.
\end_layout

\begin_layout Section
Chyba upravených zobrazení
\begin_inset CommandInset label
LatexCommand label
name "Chyba_zobrazení/Upravená"

\end_inset


\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

implementaci je použita úprava klasického modelu popsaná v
\begin_inset space ~
\end_inset

části 
\begin_inset CommandInset ref
LatexCommand ref
reference "PIFS/Použitý_model"

\end_inset

, kde místo koeficientů 
\begin_inset Formula $u$
\end_inset

 a 
\begin_inset Formula $v$
\end_inset

 je uložena průměrná hodnota a směrodatná odchylka hodnot cílového bloku.
 Koeficienty zobrazení jsou pak počítány v
\begin_inset space ~
\end_inset

každé iteraci z
\begin_inset space ~
\end_inset

těchto uložených hodnot a ze stavu zdrojového bloku v
\begin_inset space ~
\end_inset

předchozí iteraci.
 Nová definice koeficientů je
\begin_inset Formula \[
\bar{u}=\pm\frac{\sqrt{n\sum r_{i}^{2}-\left(\sum r_{i}\right)^{2}}}{\sqrt{n\sum\bar{d}_{i}^{2}-\left(\sum\bar{d_{i}}\right)^{2}}},\qquad\bar{v}=\frac{1}{n}\sum r_{i}-\frac{\bar{u}}{n}\sum\bar{d}_{i}\]

\end_inset

kde 
\begin_inset Formula $\bar{d_{i}}$
\end_inset

 je značení pro hodnotu pixelu zdrojového bloku z
\begin_inset space ~
\end_inset

přechozí iterace.
\end_layout

\begin_layout Standard
Tím je ovlivněna i optimální chyba zobrazení, protože ani za předpokladu
 zobrazování původního obrázku se nemusí 
\begin_inset Formula $\bar{u}$
\end_inset

 rovnat 
\begin_inset Formula $u$
\end_inset

.
 Pro následující odvození bude použito statistické značení, které je zde
 názornější:
\end_layout

\begin_layout Description
výběrová
\begin_inset space ~
\end_inset

směrodatná
\begin_inset space ~
\end_inset

odchylka 
\begin_inset Formula ${\displaystyle s_{r}=\sqrt{\frac{1}{n-1}\left[\sum_{i=1}^{n}r_{i}^{2}-\frac{1}{n}\left(\sum_{i=1}^{n}r_{i}\right)^{2}\right]}}$
\end_inset


\end_layout

\begin_layout Description
výběrová
\begin_inset space ~
\end_inset

kovariance 
\begin_inset Formula ${\displaystyle q_{d,r}=\frac{1}{n-1}\left(\sum_{i=1}^{n}d_{i}r_{i}-\frac{1}{n}\sum_{i=1}^{n}d_{i}\sum_{i=1}^{n}r_{i}\right)}$
\end_inset


\end_layout

\begin_layout Description
výběrová
\begin_inset space ~
\end_inset

korelace 
\begin_inset Formula ${\displaystyle \rho_{d,r}=\frac{q_{d,r}}{s_{d}s_{r}}}$
\end_inset


\end_layout

\begin_layout Description
konvergence frázemi typu 
\begin_inset Quotes gld
\end_inset


\emph on
pokud 
\begin_inset Formula $a\rightarrow b$
\end_inset

, pak 
\begin_inset Formula $c\rightarrow d$
\end_inset


\emph default

\begin_inset Quotes grd
\end_inset

 je myšlen zápis 
\begin_inset Formula ${\displaystyle \lim_{a\rightarrow b}c=d}$
\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Optimální lineární koeficient 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula ${\displaystyle u=\frac{q_{d,r}}{s_{d}^{2}}}$
\end_inset

 bude nahrazen koeficientem 
\begin_inset Formula ${\displaystyle \bar{u}=\pm\frac{s_{r}}{s_{\bar{d}}}}$
\end_inset

.
 Pokud povolíme zobrazení se záporným lineárním koeficientem, je nutné také
 uložit znaménko (zde značeno symbolem 
\begin_inset Formula $\pm$
\end_inset

).
 Při implementaci je navíc potřeba ošetřit situaci, kdy 
\begin_inset Formula $s_{\bar{d}}=0$
\end_inset

, což nastává hlavně při první iteraci pro typický případ inicializace celého
 obrázku šedivou barvou.
\end_layout

\begin_layout Standard
Pokud
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 
\begin_inset Formula $s_{\bar{d}}\rightarrow s_{d}$
\end_inset

 (platí speciálně když 
\begin_inset Formula $\bar{d}\rightarrow d$
\end_inset

), pak 
\begin_inset Formula \[
{\displaystyle \frac{u}{\bar{u}}\rightarrow\pm\frac{q_{d,r}}{s_{d}^{2}}\frac{s_{d}}{s_{r}}=\pm\frac{q_{d,r}}{s_{d}s_{r}}}=\pm\rho_{d,r}\]

\end_inset

Pokud byla chyba barevného zobrazení s
\begin_inset space ~
\end_inset

koeficientem 
\begin_inset Formula $u$
\end_inset

 malá (konverguje k
\begin_inset space ~
\end_inset

nule), pak korelace 
\begin_inset Formula $\rho_{d,r}\rightarrow\pm1$
\end_inset

.
 Navíc znaménko 
\begin_inset Formula $u$
\end_inset

 je stejné jako znaménko 
\begin_inset Formula $\rho_{d,r}$
\end_inset

, takže 
\begin_inset Formula $\bar{u}\rightarrow u$
\end_inset

.
 Z
\begin_inset space ~
\end_inset

toho je zřejmé, že cílový obrázek bude pevným bodem i takto pozměněného
 operátoru.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Nová čtvercová chyba lze vyjádřit jako
\begin_inset Formula \[
\mathrm{\overline{SE}}\;=\;\sum_{i=1}^{n}\left(\bar{u}\bar{d}_{i}+\bar{v}\right)^{2}\]

\end_inset

po postupném dosazení 
\begin_inset Formula $\bar{v}=\frac{1}{n}\sum r_{i}-\frac{\bar{u}}{n}\sum\bar{d}_{i}$
\end_inset

 a 
\begin_inset Formula ${\displaystyle \bar{u}=\pm\frac{s_{r}}{s_{\bar{d}}}}$
\end_inset

 dostaneme
\begin_inset Formula \begin{multline*}
\mathrm{\overline{SE}}\;=\;\sum_{i=1}^{n}\left[\bar{u}\left(\bar{d}_{i}-\frac{1}{n}\sum\bar{d}_{j}\right)-\left(r_{i}-\frac{1}{n}\sum r_{j}\right)\right]^{2}\;=\\
=\;{\textstyle \bar{u}^{2}{\displaystyle \sum_{i=1}^{n}}\left(\bar{d}_{i}-\frac{\sum\bar{d}_{j}}{n}\right)^{2}-2\bar{u}{\displaystyle \sum_{i=1}^{n}}\left(\bar{d}_{i}-\frac{\sum\bar{d}_{j}}{n}\right)\left(r_{i}-\frac{\sum r_{j}}{n}\right)+{\displaystyle \sum_{i=1}^{n}}\left(r_{i}-\frac{\sum r_{j}}{n}\right)^{2}\;=}\\
{\displaystyle =\; n\bar{u}^{2}s_{\bar{d}}^{2}-2n\bar{u}q_{\bar{d},r}+ns_{r}^{2}\;=\; n\frac{s_{r}^{2}}{s_{\bar{d}}^{2}}s_{\bar{d}}^{2}\mp2n\frac{s_{r}}{s_{\bar{d}}}q_{\bar{d},r}+ns_{r}^{2}\;=\;2n\left(s_{r}^{2}\mp\frac{s_{r}}{s_{\bar{d}}}q_{\bar{d},r}\right)}\end{multline*}

\end_inset

Protože 
\begin_inset Formula $q_{\bar{d},r}$
\end_inset

 má vždy stejné znaménko jako 
\begin_inset Formula $\bar{u}$
\end_inset

, lze výraz upravit na 
\begin_inset Formula \[
\mathrm{\overline{SE}}\;=\;2ns_{r}^{2}\left(1-\frac{\left|q_{\bar{d},r}\right|}{s_{\bar{d}}s_{r}}\right)\;=\;2ns_{r}^{2}\left(1-\left|\rho_{\bar{d},r}\right|\right)\]

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Původní optimální čtvercová chyba lze přepsat do tvaru:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathrm{\widehat{SE}}\;=\; n\frac{s_{d}^{2}s_{r}^{2}-q_{d,r}^{2}}{s_{d}^{2}}\;=\; ns_{r}^{2}\left(1-\rho_{d,r}^{2}\right)\;=\; ns_{r}^{2}\left(1-\left|\rho_{d,r}\right|\right)\left(1+\left|\rho_{d,r}\right|\right)\]

\end_inset

Za předpokladu, že 
\begin_inset Formula $s_{\bar{d}}\rightarrow s_{d}$
\end_inset

, dostaneme absolutní a relativní nárůst chyby
\begin_inset Formula \[
\mathrm{\overline{SE}}-\mathrm{\widehat{SE}}\;=\; ns_{r}^{2}\left(1-\left|\rho_{d,r}\right|\right)\left[2-\left(1+\left|\rho_{d,r}\right|\right)\right]\;=\; ns_{r}^{2}\left(1-\left|\rho_{d,r}\right|\right)^{2}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\frac{\mathrm{\overline{SE}}-\mathrm{\widehat{SE}}}{\mathrm{\widehat{SE}}}=\frac{\left(1-\left|\rho_{d,r}\right|\right)^{2}}{\left(1-\left|\rho_{d,r}\right|\right)\left(1+\left|\rho_{d,r}\right|\right)}=\frac{1-\left|\rho_{d,r}\right|}{1+\left|\rho_{d,r}\right|}\]

\end_inset


\begin_inset VSpace defskip
\end_inset

Pro vzájemně dobře zobrazitelné bloky 
\begin_inset Formula $\left|\rho_{d,r}\right|\rightarrow1$
\end_inset

, takže nárůst chyby bude velmi malý.
\end_layout

\begin_layout Section
Penalizace vysokého lineárního koeficientu 
\begin_inset CommandInset label
LatexCommand label
name "Chyba_zobrazení/Penalizace"

\end_inset


\end_layout

\begin_layout Standard
Výše zmíněnou úpravou barevných zobrazení bylo sníženo riziko divergence
 zobrazení bez nutnosti omezení lineárního koeficientu.
 Díky tomu, že všechny hodnoty jsou omezeny v
\begin_inset space ~
\end_inset

intervalu 
\begin_inset Formula $\left[0;1\right]$
\end_inset

 a cílové bloky mají vždy správnou průměrnou hodnotu, nemůžou se obrazy
 zobrazení od původního obrázku příliš lišit (v
\begin_inset space ~
\end_inset

praxi funguje dobře, ale bez jakéhokoliv důkazu omezení odchylky).
\end_layout

\begin_layout Standard
Přesto jsou vysoké lineární koeficienty nebezpečné, protože zdrojové bloky
 jsou při dekódování vždy pouze aproximací jejich stavu v
\begin_inset space ~
\end_inset

původním obrázku.
 Čím vyšší je lineární koeficient, tím více se případná odchylka zdrojového
 bloku distribuuje do cílového a poté případně v
\begin_inset space ~
\end_inset

dalších iteracích i do jiných zdrojových bloků.
\end_layout

\begin_layout Standard
Proto je zde navržena následující penalizace, která zvyšuje odhadovanou
 chybu zobrazení v
\begin_inset space ~
\end_inset

závislosti na jeho lineárním koeficientu.
 Pokud ve vzorci pro chybu z
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení/Upravená"

\end_inset

 přičteme k
\begin_inset space ~
\end_inset

hodnotám zdrojového bloku odchylku 
\begin_inset Formula $\epsilon_{i}$
\end_inset

, dostaneme
\begin_inset Formula \[
\mathrm{\widetilde{SE}}\;=\;\sum_{i=1}^{n}\left[\bar{u}\left(\bar{d}_{i}+\epsilon_{i}\right)+\bar{v}\right]^{2}\;=\;\sum_{i=1}^{n}\left[\left(\bar{u}\bar{d}_{i}+\bar{v}\right)^{2}+\left(\bar{u}\bar{d}_{i}+\bar{v}\right)\bar{u}\epsilon_{i}+\bar{u}^{2}\epsilon_{i}^{2}\right]\]

\end_inset

Když označíme původní odchylku 
\begin_inset Formula $e_{i}=\bar{u}\bar{d}_{i}+\bar{v}$
\end_inset


\begin_inset Formula \[
\mathrm{\widetilde{SE}}\;=\;{\textstyle \sum}e_{i}^{2}+\bar{u}{\textstyle \sum}e_{i}\epsilon_{i}+\bar{u}^{2}{\textstyle \sum}\epsilon_{i}^{2}\]

\end_inset

První suma je zřejmě rovna původní chybě 
\begin_inset Formula $\mathrm{\overline{SE}}$
\end_inset

.
 Hodnota druhé sumy je závislá na korelaci odchylek způsobených nepřesností
 zobrazení a odchylek ve zdrojovém bloku.
 Lze snadno ukázat, že 
\begin_inset Formula $\sum e_{i}=0$
\end_inset

 (platí díky tomu, že optimální zobrazení v
\begin_inset space ~
\end_inset

RMSE metrice zobrazují průměrnou hodnotu zdrojového bloku na průměrnou hodnotu
 cílového bloku).
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Deleted:
\end_layout

\begin_layout Plain Layout
Pokud by tedy byly chyby nezávislé, očekávaná hodnota sumy by byla nulová.
 Protože o
\begin_inset space ~
\end_inset

její hodnotě nelze moc říct
\begin_inset space ~
\end_inset

--- může být kladná i záporná, je zde zanedbána, což odpovídá předpokladu
 nezávislosti chyb (který je ale zcela nepodložený).
\end_layout

\end_inset

Za předpokladu, že chyby 
\begin_inset Formula $\epsilon_{i}$
\end_inset

 nejsou korelované, vyjde nulová očekávaná hodnota druhé sumy.
\end_layout

\begin_layout Standard
Třetí suma odpovídá odchylce zmenšeného zdrojového bloku.
 Pokud požadovanou odchylku pro cílový blok označíme 
\begin_inset Formula $\mathrm{SE'}$
\end_inset

 a poměr velikostí zdrojového bloku po zmenšení a před zmenšením označíme
 
\begin_inset Formula $\alpha\in\left(0;1\right)$
\end_inset

.
 Pak lze očekávat, že se bude odchylka zdrojového bloku před zmenšením pohybovat
 okolo 
\begin_inset Formula $\frac{\mathrm{SE'}}{\alpha}$
\end_inset

.
 Když při zmenšování jeden pixel vzniká jako průměr 
\begin_inset Formula $\frac{1}{\alpha}$
\end_inset

 pixelů zdrojového bloku s
\begin_inset space ~
\end_inset

nekorelovanými odchylkami, pak očekávaná čtvercová chyba zmenšeného zdrojového
 bloku je rovna 
\begin_inset Formula $\alpha\cdot\mathrm{SE'}$
\end_inset

, tedy nová chyba zobrazení zahrnující očekávanou odchylku se zjednoduší
 na
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula \[
\mathrm{\widetilde{SE}}\;\approx\;\mathrm{\overline{SE}}\ +\ \bar{u}^{2}\alpha\ \mathrm{SE'}\;=\;\mathrm{\overline{SE}}\ +\ \alpha\frac{s_{r}^{2}}{s_{\bar{d}}^{2}}\ \mathrm{SE'}\]

\end_inset


\end_layout

\begin_layout Standard
Celém odvození penalizace lze analogicky provést i pro klasický model zobrazován
í (v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení/Klasická"

\end_inset

), ale v
\begin_inset space ~
\end_inset

obou případech jsou používany nepodložené předpoklady, především předpoklad
 nekorelovanosti chyb jednotlivých pixelů, který by bylo vhodné alespoň
 statisticky ověřit.
\end_layout

\begin_layout Standard
Implementace příslušného modulu (popsaná v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Zobrazování"

\end_inset

) dává možnost započítat penalizaci do chyb zobrazení.
 Při jejím použití je dosahována výrazně vyšší kvalita dekódovaného obrázku
 než při klasickém počítání s
\begin_inset space ~
\end_inset

omezenou nebo neomezenou velikostí lineárních koeficientů za cenu pouze
 nepatrného poklesu kompresního poměru.
\end_layout

\begin_layout Chapter
Implementace
\end_layout

\begin_layout Subsubsection
Cíle a zásady
\end_layout

\begin_layout Standard
Cílem implementace bylo vytvořit framework pro studium fraktální komprese,
 kde by byly jednotlivé části algoritmů oddělené do modulů, aby bylo možné
 kompatibilní algoritmy snadno vzájemně vyměnovat a aby implementace jednotlivýc
h technik byla tvořena převážně algoritmickým kódem, odděleně od správy
 závislostí mezi moduly, interakce s
\begin_inset space ~
\end_inset

uživatelem a nezávisle na způsobu implementace ostatních modulů.
\end_layout

\begin_layout Standard
Aby bylo možné jednotlivé techniky objektivně porovnávat, je kladen důraz
 na efektivitu implementace.
 Proto je v
\begin_inset space ~
\end_inset

některých algoritmech, kde by dělení do více modulů významným způsobem snížilo
 efektivitu, upřednostněna konfigurace modulu pomocí jiných parametrů.
\end_layout

\begin_layout Subsubsection
Zvolené vývojové nástroje
\end_layout

\begin_layout Standard
Jako programovací jazyk pro implementaci bylo zvoleno C++, především kvůli
 kombinaci vysoké efektivity a mnoha pokročilých vlastností (například generické
 programování).
 Pro překlad byl používán překladač z
\begin_inset space ~
\end_inset

rodiny GNU překladačů (GCC,
\begin_inset CommandInset citation
LatexCommand cite
key "GCC"

\end_inset

).
\end_layout

\begin_layout Standard
Grafické uživatelské rozhraní (GUI) je realizováno pomocí knihoven Qt
\begin_inset CommandInset citation
LatexCommand cite
key "Qt"

\end_inset

, které také zajišťují čtení a zápis obrázků ve standardních formátech (BMP,
 PNG, JFIF).
\end_layout

\begin_layout Standard
Díky použitým prostředkům by měl celý program být přenositelný na mnoho
 systémů.
 Vývoj a ladění probíhaly na GNU/Linux, s
\begin_inset space ~
\end_inset

testováním také na MS
\begin_inset space ~
\end_inset

Windows
\begin_inset space ~
\end_inset

XP.
\end_layout

\begin_layout Section
Modularizace
\end_layout

\begin_layout Standard
Oddělení modulů do jednotlivých dynamických knihoven by zde nepřineslo významný
 užitek, takže byla zvolena kompilace celého programu do jednoho spustitelného
 souboru.
 Přes to jsou zde minimalizovány vzájemné závislosti mezi moduly.
\end_layout

\begin_layout Standard
Deklarace související s
\begin_inset space ~
\end_inset

modularizací jsou v
\begin_inset space ~
\end_inset

souboru 
\family sans
modules.h
\family default
, většina implementace je pro přehlednost v
\begin_inset space ~
\end_inset


\family sans
modules.cpp.
\end_layout

\begin_layout Subsubsection
Základní vlastnosti modulů
\end_layout

\begin_layout Standard
Všechny moduly jsou potomky třídy 
\family typewriter
Module
\family default
, která definuje základní společné vlastnosti, především způsob reprezentace
 nastavení.
 Je zde virtuální metoda 
\family typewriter
info
\family default
, která vrací referenci na strukturu obsahující informace o
\begin_inset space ~
\end_inset

typu modulu
\begin_inset space ~
\end_inset

--- jeho identifikační číslo, jméno, text popisující funkci, počet parametrů
 nastavení a ukazatel na pole obsahující vlastnosti jednotlivých parametrů
 nastavení (typ, rozsah hodnot, název a popis).
 Dále třída 
\family typewriter
Module
\family default
 obsahuje ukazatel na pole skutečných hodnot nastavení pro daný modul a
 také spoustu dalších pomocných typů a metod.
\end_layout

\begin_layout Standard
Tento způsob práce s
\begin_inset space ~
\end_inset

nastaveními umožňuje jejich automatické měnění, ukládání a zobrazování libovolný
m uživatelským rozhraním.
 Vše pomocí společného kódu odděleného od všech modulů.
\end_layout

\begin_layout Standard
Obsah zmíněné informační struktury je potřeba pro každý typ modulu nadefinovat,
 což by znamenalo mnoho opakujícího se technického kódu, a proto jsou pro
 tento účel vytvořeny funkce a makra, kterým stačí předat pouze jednotlivé
 vlastnosti (název, typy parametrů, \SpecialChar \ldots{}
), takže implementace jednotlivých modulů
 je jednodušší a přehlednější.
\end_layout

\begin_layout Subsubsection
Správa modulů
\end_layout

\begin_layout Standard
Aby framework mohl s
\begin_inset space ~
\end_inset

modulem pracovat, je potřeba upravit soubor 
\family sans
modules.cpp
\family default
 vložením hlavičkového souboru (pomocí 
\family typewriter
#include
\family default
) a přidáním typu modulu do seznamu 
\family typewriter
Modules
\family default
.
 Společný kód v
\begin_inset space ~
\end_inset

souboru se postará o
\begin_inset space ~
\end_inset

možnost volby modulu, závislosti a další technické záležitosti.
 Zde je nejsložitější generování některých metod z
\begin_inset space ~
\end_inset

tohoto seznamu typů, pro které je využita část z
\begin_inset space ~
\end_inset

knihovny, kterou napsal Andei Alexandrescu jako přílohu ke knize 
\emph on
Modern C++ Design
\emph default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Loki"

\end_inset

.
\end_layout

\begin_layout Standard
Pro
\begin_inset space ~
\end_inset

správu modulů a vytváření nových slouží třída 
\family typewriter
Module\SpecialChar \-
Factory
\family default
.
 Ta má jedinou instanci, která při startu vytvoří prototyp pro každý typ
 modulu.
 Prototypy uchovávají výchozí nastavení jednotlivých typů modulů a je možné
 je použít pro získání obecných informací o
\begin_inset space ~
\end_inset

typech modulů (metoda 
\family typewriter
info
\family default
) nebo pro vytváření dalších instancí.
\end_layout

\begin_layout Standard
Nové moduly jsou vytvářeny zásadně klonováním, mělkým nebo hlubokým.
 Oba způsoby vytvoří novou instanci pomocí kopírovacího konstruktoru a zkopírují
 nastavení modulu.
 Mělké klonování navíc vynuluje odkazy na podřízené moduly, zatímco hluboké
 klonování je naklonuje stejným způsobem.
 Hluboké klonování se hodí například pro vytvoření nového výchozího stromu
 modulů (například před kompresí) a mělké se používá při načítání ze souborů,
 kde není ve chvíli vytváření modulů zřejmé, jakých typů budou podřízené
 moduly.
\end_layout

\begin_layout Subsubsection
Závislosti mezi moduly
\end_layout

\begin_layout Standard
Jsou definována rozhraní, každé popisující jednu požadovanou funkcionalitu.
 Všechna použitá rozhraní se nacházejí v
\begin_inset space ~
\end_inset

souborech 
\family sans
interfaces.h
\family default
 a 
\family sans
interfaces.cpp
\family default
.
 Každé z
\begin_inset space ~
\end_inset

nich je potomkem šablonované třídy 
\family typewriter
Inter\SpecialChar \-
face
\family default
, která zpřístupňuje seznam identifikátorů všech typů modulů implementujících
 toto rozhraní (kód je vygenerován ze seznamu 
\family typewriter
Modules
\family default
).
\end_layout

\begin_layout Standard
Každý modul implementuje právě jedno rozhraní a může využívat libovolné
 množství dalších rozhraní
\begin_inset space ~
\end_inset

--- jedním z
\begin_inset space ~
\end_inset

typů parametrů modulů je podřízený modul implementující zvolené rozhraní.
 Uživatel pak na tato místa může zapojit libovolný typ modulu (jsou zobrazeny
 pouze kompatibilní typy).
 Konfigurace komprese je tedy dána tímto stromem typů modulů spolu s
\begin_inset space ~
\end_inset

jejich dalším nastavením.
\end_layout

\begin_layout Section
Kořenový modul
\end_layout

\begin_layout Subsubsection
IRoot
\end_layout

\begin_layout Standard
Rozhraní pro kořenový modul je navrženo jako jediný přístupový bod pro GUI
 ke kompresi a dekompresi.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Kořen včetně celého stromu může být ve třech různých stavech.
 V
\begin_inset space ~
\end_inset

počátečním prázdném stavu strom neobsahuje žádný obrázek, ale může v
\begin_inset space ~
\end_inset

něm docházet ke změnám konfigurace, včetně vyměňování podřízených modulů.
\end_layout

\begin_layout Standard
Z
\begin_inset space ~
\end_inset

počátečního stavu může přejít do komprimovaného stavu úspěšným voláním metody
 
\family typewriter
encode
\family default
, které je předán bitmapový obrázek ke kompresi (třída knihoven Qt) a reference
 na strukturu 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
doplnit název?
\end_layout

\end_inset

 umožňující komunikaci s
\begin_inset space ~
\end_inset

jiným vláknem během tohoto často zdlouhavého procesu.
 Pokud nebylo možné kompresi dokončit (například kvůli přerušení uživatelem),
 vrátí metoda 
\family typewriter
false
\family default
 a strom zůstává v
\begin_inset space ~
\end_inset

počátečním stavu.
\end_layout

\begin_layout Standard
Druhou možností je přejít z
\begin_inset space ~
\end_inset

počátečního stavu do dekomprimovaného stavu úspěšným voláním metody 
\family typewriter
from\SpecialChar \-
Stream
\family default
, které je předán proud bytů obsahující komprimovanou podobu obrázku a míra
 přiblížení pro dekompresi.
 Rozměry dekomprimovaného obrázku jsou původní rozměry vynásobené 
\begin_inset Formula $2^{i}$
\end_inset

 pro nezáporné 
\begin_inset Formula $i$
\end_inset

.
 Pokud nebylo možné dekódovat obrázek, například kvůli špatnému formátu
 souboru, vrátí metoda 
\family typewriter
false
\family default
 a stav stromu se nezmění.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dále rozhraní obsahuje metody pro ukládání obrázku v
\begin_inset space ~
\end_inset

komprimovaném stavu do proudu bytů, pro provádění dekódovacích akcí (vyčištění
 obrázku nebo iterování zobrazení), pro uložení momentálního stavu dekódování
 do bitmapového obrázku (třída knihoven Qt) a pro ukládání a nahrávání nastavení
 celého stromu.
\end_layout

\begin_layout Subsubsection
MRoot
\end_layout

\begin_layout Standard
Implementace kořenového modulu umožňuje jednotné nastavení nejzákladnějších
 parametrů komprese a rozděluje fáze procesu mezi několik nezávislých modulů.
\end_layout

\begin_layout Standard
Kvůli uživatelské přívětivosti bylo zvoleno nastavování kvality komprese
 v
\begin_inset space ~
\end_inset

rozsahu 0--100.
 Hodnota je pomocí zvoleného modulu s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
IQua\SpecialChar \-
lity\SpecialChar \-
2SE
\family default
 konvertována na nejvyšší možnou čtvercovou chybu pro danou velikost cílového
 bloku (modul je ve skutečnosti použit až v
\begin_inset space ~
\end_inset

podřízených modulech).
\end_layout

\begin_layout Standard
Dále lze zvolit modul s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
IColor\SpecialChar \-
Trans\SpecialChar \-
former
\family default
 starající se o
\begin_inset space ~
\end_inset

barvy v
\begin_inset space ~
\end_inset

obrázku, modul s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
IShape\SpecialChar \-
Trans\SpecialChar \-
former
\family default
 zajišťující další fáze komprese a také maximální množství zdrojových bloků,
 protože je to velmi důležitý parametr pro všechny metody fraktální komprese.
\end_layout

\begin_layout Section
Konverze kvality
\end_layout

\begin_layout Subsubsection
IQuality2SE
\end_layout

\begin_layout Standard
Rozhraní pro konverzi kvality
\begin_inset space ~
\end_inset

--- z
\begin_inset space ~
\end_inset

velikosti cílového bloku a nastavení kvality spočítá odpovídající maximální
 přípustnou čtvercovou odchylku.
\end_layout

\begin_layout Subsubsection
MQuality2SE
\end_layout

\begin_layout Standard
Třída 
\family typewriter
MQuality2SE_std
\family default
 je triviální implementací rozhraní pro konverzi kvality, která používá
 čtvercovou odchylku nezávislou na velikostech bloků.
 Přípustná odchylka je pro nejvyšší kvalitu nulová a pak roste přibližně
 exponenciálně (exponenciální funkce je mírně posunutá tak, aby procházela
 nulou při kvalitě 
\begin_inset Formula $100\%$
\end_inset

).
\end_layout

\begin_layout Standard
Bylo by sice přirozenější mít pro danou kvalitu místo čtvercové chyby konstantní
 její podíl s
\begin_inset space ~
\end_inset

počtem pixelů bloku.
 To by vedlo k
\begin_inset space ~
\end_inset

větší variabilitě velikostí bloků a ve většině případů i k
\begin_inset space ~
\end_inset

nepatrně lepší objektivní kvalitě (při stejném kompresním poměru), ale protože
 v
\begin_inset space ~
\end_inset

tomto projektu nebyly implementovány žádné vyhlazovací techniky, objevily
 by se u
\begin_inset space ~
\end_inset

velkých bloků velmi výrazné hrany, takže by se subjektivní kvalita zhoršila.
 Pro porovnání je implementována i tato možnost v
\begin_inset space ~
\end_inset

podobě modulu 
\family typewriter
MQuality2SE_alt
\family default
.
\end_layout

\begin_layout Section
Zpracování barev
\end_layout

\begin_layout Subsubsection
IColorTransformer
\end_layout

\begin_layout Standard
Rozhraní převádí práci s
\begin_inset space ~
\end_inset

jedním barevným obrázkem na práci s
\begin_inset space ~
\end_inset

několika jednobarevnými.
 Barevné obrázky jsou reprezentované třídou 
\family typewriter
QImage
\family default
 z
\begin_inset space ~
\end_inset

knihoven Qt, jednobarevné obrázky jsou zde definovány jako matice pixelů
 spolu s
\begin_inset space ~
\end_inset

ukazatelem na strukturu obsahující některé parametry (rozměry, přiblížení,
 kvalita komprese a modul pro její konverzi, maximální počet zdrojových
 bloků).
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
rozepsat? aktualizační struktura? diskuze o volbě reprezentace?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Metody rozhraní umožňují vytvoření jednobarevných obrázků pro dané parametry
 a barevný obrázek, zpětné složení do barevného obrázku, uložení nebo načtení
 případných dat modulu.
\end_layout

\begin_layout Subsubsection
MColorModel
\end_layout

\begin_layout Standard
Třída 
\family typewriter
MColorModel
\family default
 je triviální implementací rozhraní pro zpracování barev, která nabízí práci
 v
\begin_inset space ~
\end_inset

modelech RGB a YCbCr.
 Protože je citlivost oka na jednotlivé barevné složky různá, je navíc umožněno
 zvolit pro každou ze složek číslo z
\begin_inset space ~
\end_inset

intervalu 
\begin_inset Formula $\left[0;1\right]$
\end_inset

, kterým se vynásobí původní kvalita komprese.
\end_layout

\begin_layout Section
Počítání s maticemi pixelů
\begin_inset CommandInset label
LatexCommand label
name "Implementace/Matice"

\end_inset


\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

souboru 
\family sans
matrixutil.h
\family default
 je definováno mnoho generických struktur a několik funkcí pro jednoduchou
 a efektivní práci s
\begin_inset space ~
\end_inset

maticemi.
 Tyto nástroje jsou pak použity v
\begin_inset space ~
\end_inset

mnoha modulech a jejich rozhraních.
\end_layout

\begin_layout Subsubsection
Reprezentace pixelů
\end_layout

\begin_layout Standard
Při ukládání digitálních obrázků se pro reprezentaci pixelu nejčastěji používá
 celé číslo v
\begin_inset space ~
\end_inset

rozsahu 0--255.
 Tento způsob je paměťově velmi úsporný, ale pro tento projekt se ukázal
 jako příliš omezující.
 Například už při převodu do jiných barevných modelů by mohlo docházet k
\begin_inset space ~
\end_inset

výraznějším ztrátám informace.
 Proto byla zvolena reprezentace pomocí čísla s
\begin_inset space ~
\end_inset

plovoucí řádovou čárkou z
\begin_inset space ~
\end_inset

intervalu 
\begin_inset Formula $\left[0;1\right]$
\end_inset

.
 Pro reprezentaci běžných pixelů postačují čísla s
\begin_inset space ~
\end_inset


\emph on
jednoduchou přesností
\emph default
, ale pro většinu složitějších výpočtů a mezivýsledků jsou použita čísla
 s
\begin_inset space ~
\end_inset


\emph on
dvojitou přesností
\emph default
, aby byly minimalizovány zaokrouhlovací chyby.
\end_layout

\begin_layout Subsubsection
Reprezentace matic
\end_layout

\begin_layout Standard
Matice jsou reprezentovány tak, že jsou jejich prvky po sloupcích uloženy
 za sebe do pole.
 Vlastní práci s
\begin_inset space ~
\end_inset

maticemi zajišťuje šablona 
\family typewriter
Matrix\SpecialChar \-
Slice
\family default
 (parametrizovaná typem prvků matice), která uchovává ukazatel na levý horní
 prvek a počet kroků nutných k
\begin_inset space ~
\end_inset

přechodu na další sloupec.
 Navenek poskytuje přirozené indexování, konverzi na instanci pouze pro
 čtení a další operace.
\end_layout

\begin_layout Standard
Oproti reprezentacím založených na ukládání jednotlivých řádkových nebo
 sloupcových vektorů má toto řešení mnoho výhod.
 Má menší nároky na spotřebu paměťi a na její alokátor, průchody jsou překladače
m lépe optimalizovatelné a je možné vytvářet odkazy na podmatice.
\end_layout

\begin_layout Subsubsection
Rychlé sčítání podmatic
\end_layout

\begin_layout Standard
Některé moduly potřebují znát součty hodnot pixelů a jejich druhých mocnin
 na blocích se kterými pracují.
 Pro tyto účely je používána jednoduchá struktura (implementovaná v
\begin_inset space ~
\end_inset

šabloně 
\family typewriter
Matrix\SpecialChar \-
Summer
\family default
), která si předpočítá součty pro všechny obdélníky začínající v
\begin_inset space ~
\end_inset

levém horním rohu a pak může spočítat součet libovolného obdélníka pouze
 ze čtyř rohových hodnot.
\end_layout

\begin_layout Standard
Šablona 
\family typewriter
Matrix\SpecialChar \-
Summer
\family default
 není používána samostaně, ale jako součást šablony 
\family typewriter
Summed\SpecialChar \-
Matrix
\family default
, která kromě matice vlastních hodnot obsahuje její rozměry a šablonu 
\family typewriter
Matrix\SpecialChar \-
Summer
\family default
 pro rychlý výpočet součtů hodnot a jejich druhých mocnin.
 Konkrétně je definována struktura 
\family typewriter
Summed\SpecialChar \-
Pixels
\family default
, která je jen instanciací šablony 
\family typewriter
Summed\SpecialChar \-
Matrix
\family default
 pro již zmíněné typy hodnot pixelů používané v
\begin_inset space ~
\end_inset

projektu.
\end_layout

\begin_layout Subsubsection
Iterace na matici
\end_layout

\begin_layout Standard
Na mnoha místech v
\begin_inset space ~
\end_inset

projektu je potřeba současně procházet dvě stejně velké obdélníkové podmatice
 a provádět nějakou činnost s
\begin_inset space ~
\end_inset

příslušnými dvojicemi jejich prvků, navíc je často nutné počítat s
\begin_inset space ~
\end_inset

libovolnou z
\begin_inset space ~
\end_inset

8 vzájemných afinních transformací podmatic.
 Opakovaně ručně psané cykly by velmi znepřehledňovaly kód a byly by potencionál
ním zdrojem chyb.
 Proto je zde použit jiný přístup využívající generické programovaní a optimaliz
ace kompilátoru.
\end_layout

\begin_layout Standard
Základem celé techniky je funkce 
\family typewriter
walk\SpecialChar \-
Operate
\family default
, která má tři parametry
\begin_inset space ~
\end_inset

--- řídící iterátor, druhý (podřízený) iterátor a operátor.
 Funkce pak pouze najednou posouvá oba iterátory a na odpovídajících dvojicích
 prvků volá operátor.
 Díky tomu, že se jednotlivé části cyklu takto oddělí, je možné konkrétní
 alternativy implementovat a pak libovolně kombinovat.
\end_layout

\begin_layout Standard
Iterátory musí podporovat metody pro získání aktuálního prvku (nejlépe formou
 reference), posun na další prvek, posun na další seznam (řádek/sloupec),
 zahájení práce se seznamem a v
\begin_inset space ~
\end_inset

případě řídícího iterátoru také test konce seznamu a test úplného konce
 iterace.
 Operátor pak musí být schopný volání s
\begin_inset space ~
\end_inset

parametry prvků prvního a druhého iterátoru.
 Díky tomu, že funkce
\family typewriter
 walk\SpecialChar \-
Operate
\family default
 vrací koncový stav operátoru, lze jako operátor použít i strukturu, která
 do sebe sbírá nějaká data.
\end_layout

\begin_layout Standard
V
\begin_inset space ~
\end_inset

souboru jsou přímo implementovány iterátory pro osm afinních zobrazení a
 také přetížení funkce 
\family typewriter
walk\SpecialChar \-
Operate
\family default
, které má v
\begin_inset space ~
\end_inset

parametrech místo druhého iterátoru číslo afinní transformace, podle kterého
 vybere příslušný iterátor.
 Dále je zde iterátor pro třídu QImage používaný pro konverzi na matici
 a také několik jednoduchých operátorů pro výpočet součtu vzájemných součinů
 a pro afinní transformaci hodnot.
\end_layout

\begin_layout Section
Změny tvarů
\end_layout

\begin_layout Subsubsection
IShapeTransformer
\begin_inset CommandInset label
LatexCommand label
name "Implementace/IShapeTransformer"

\end_inset


\end_layout

\begin_layout Standard
Rozhraní pro 
\begin_inset Quotes gld
\end_inset

transformaci tvarů
\begin_inset Quotes grd
\end_inset

 zajišťuje kompresi a dekompresi jednobarevných obrázků (definovaných v
\begin_inset space ~
\end_inset

rozhraní 
\family typewriter
IColor\SpecialChar \-
Trans\SpecialChar \-
former
\family default
).
 Je zamýšleno jako rozcestí pro několik druhů voleb, například pro možnost
 přechodu k
\begin_inset space ~
\end_inset

šestiúhelníkovému tvaru pixelů.
 
\end_layout

\begin_layout Standard
Ze souboru vstupujících obrázků je vytvořeno několik nezávislých 
\emph on
úkolů
\emph default
, pro které lze provádět výpočty vzájemně paralelně.
 Rozhraní poskytuje metody pro provádění komprese a dekódovacích akcí pro
 jednotlivé 
\emph on
úkoly
\emph default
 a také ukládání do proudu bytů a zpětné nahrávání.
 
\end_layout

\begin_layout Standard
Data všech 
\emph on
úkolů
\emph default
 jsou ukládána po fázích, což umožňuje implementaci progresivního dekódování,
 přestože pro něj momentálně není v
\begin_inset space ~
\end_inset

kořenovém modulu podpora.
 Důležité pro účinnost progresivního dekódování je, že uspořádání fází má
 vyšší prioritu než dělení na jednobarevné části způsobené zpracováním barev
 nebo přílišnou velikostí obrázku.
 Proto bylo nutné dostat tento koncept už do tak obecného rozhraní.
\end_layout

\begin_layout Subsubsection
MSquarePixels
\end_layout

\begin_layout Standard
Třída 
\family typewriter
MSquarePixels
\family default
 je implementací rozhraní pro 
\begin_inset Quotes gld
\end_inset

transformaci tvarů
\begin_inset Quotes grd
\end_inset

 zůstávající u
\begin_inset space ~
\end_inset

čtvercového tvaru pixelů, umožňující navíc dělení velkých obrázků na menší,
 nezávisle (případně i
\begin_inset space ~
\end_inset

paralelně) zpracovávané.
 Pro vlastní práci s
\emph on

\begin_inset space ~
\end_inset

úkoly
\emph default
 jsou použity zvolené moduly pro dělení na cílové bloky, pro výběr množiny
 zdrojových bloků a pro hledání optimálních zobrazení.
\end_layout

\begin_layout Standard
Dělení jednobarevných obrázků na 
\emph on
úkoly
\emph default
 vychází z
\begin_inset space ~
\end_inset

předaných bloků a probíhá rekurzivně.
 Každý blok, který je větší než nastavená mez, je rozdělen podle delší souřadnic
e tak, že poměr velikostí je nejvýše dvojnásobný a navíc nově vzniklá strana
 levé/horní části má délku mocniny 2.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes gld
\end_inset

Čtvercové
\begin_inset Quotes grd
\end_inset

 moduly
\end_layout

\begin_layout Standard
Na třídu 
\family typewriter
MSquarePixels
\family default
 navazuje několik rozhraní a modulů obsahující v
\begin_inset space ~
\end_inset

názvu slovo 
\emph on
square
\emph default
.
 Všechny pracují pouze s
\begin_inset space ~
\end_inset

klasickou (čtvercovou) topologií pixelů a upřednostňují čtvercové bloky
 o
\begin_inset space ~
\end_inset

hraně délky mocniny 2.
 Často se pro libovolný blok definuje jeho 
\emph on
úroveň
\emph default
, což je nejmenší 
\begin_inset Formula $i$
\end_inset

 takové, že oba rozměry jsou nejvýše 
\begin_inset Formula $2^{i}$
\end_inset

.
 Nejmenší povolená 
\emph on
úroveň
\emph default
 je 2, což nejčastěji odpovídá blokům velikosti 
\begin_inset Formula $4\times4$
\end_inset

.
\end_layout

\begin_layout Standard
Moduly s
\begin_inset space ~
\end_inset

rozhraními 
\family typewriter
ISquare\SpecialChar \-
Ranges
\family default
, 
\family typewriter
ISquare\SpecialChar \-
Domains
\family default
 a 
\family typewriter
ISquare\SpecialChar \-
Encoder
\family default
 (definovanými níže) spolupracující na jenom 
\emph on
úkolu
\emph default
 často potřebují vzájemně volat své metody a také sdílet některá další data.
 Proto je definována struktura 
\family typewriter
Plane\SpecialChar \-
Block
\family default
 s
\begin_inset space ~
\end_inset

instancí pro každý 
\emph on
úkol
\emph default
.
\end_layout

\begin_layout Standard

\family typewriter
Plane\SpecialChar \-
Block
\family default
 obsahuje vlastní jednobarevnou část obrázku zpracovávnou 
\emph on
úkolem
\emph default
, schovanou v
\begin_inset space ~
\end_inset

podstruktuře 
\family typewriter
Summed\SpecialChar \-
Pixels
\family default
 (zmíněné v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Matice"

\end_inset

).
 Dále obsahuje ukazatele na moduly spolupracující na 
\emph on
úkolu
\emph default
 a na strukturu s
\begin_inset space ~
\end_inset

některými nastaveními (definovanou v
\begin_inset space ~
\end_inset

rozhraní 
\family typewriter
IColor\SpecialChar \-
Trans\SpecialChar \-
former
\family default
).
\end_layout

\begin_layout Section
Dělení na cílové bloky
\end_layout

\begin_layout Subsubsection
ISquareRanges
\end_layout

\begin_layout Standard
Rozhraní pro dělení na obdélníkové cílové bloky definuje základní strukturu
 
\family typewriter
Range\SpecialChar \-
Block
\family default
 pro reprezentaci cílového bloku, která obsahuje souřadnice jeho okrajů,
 přepočítanou 
\emph on
úroveň
\emph default
 bloku a přídavný ukazatel, do kterého si spolupracující modul s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
ISquare\SpecialChar \-
Encoder
\family default
 může ukládat pomocná data
\family typewriter
.

\family default
 Moduly implementující rozhraní mohou používat libovolný typ odvozený z
\begin_inset space ~
\end_inset


\family typewriter
Range\SpecialChar \-
Block
\family default
, ale ostatním je viditelná pouze část definovaná v
\begin_inset space ~
\end_inset

rozhraní.
\end_layout

\begin_layout Standard
Kromě klasických metod pro ukládání a nahrávání nastavení a dalších dat
 je zde metoda pro získání seznamu ukazatelů na bloky, na které je 
\emph on
úkol
\emph default
 rozdělen, a metoda pro zpracování celého 
\emph on
úkolu
\emph default
.
 Při jejím provádění je celý blok rozdělen na cílové bloky a pomocí volání
 metod modulů spolupracujících na úkolu je pro každý z
\begin_inset space ~
\end_inset

nich nalezeno optimální zobrazení.
 Tyto činnosti jsou spojeny proto, že schopnost nalézt dostatečně dobrá
 zobrazení typicky ovlivňuje jemnost rozdělení na cílové bloky.
\end_layout

\begin_layout Subsubsection
MQuadTree
\begin_inset CommandInset label
LatexCommand label
name "Implementace/MQuadTree"

\end_inset


\end_layout

\begin_layout Standard
Třída 
\family typewriter
MQuadTree
\family default
 implementuje klasický čtyřstromový algoritmus s
\begin_inset space ~
\end_inset

několika drobnými rozšířeními.
 Je možné zvolit zda se má používat heuristické dělení a také nejmenší a
 největší povolenou velikost bloku.
\end_layout

\begin_layout Paragraph
Způsob dělení
\end_layout

\begin_layout Standard
Původní algoritmus počítá pouze s
\begin_inset space ~
\end_inset

obrázky tvaru čtverce o
\begin_inset space ~
\end_inset

hraně mocniny 2, což by zde nebylo dostačující.
 Naštěstí stačí pracovat s
\begin_inset space ~
\end_inset

bloky stejným způsobem, jen v
\begin_inset space ~
\end_inset

některých případech jsou jejich skutečné rozměry menší, protože jsou 
\begin_inset Quotes gld
\end_inset

ořízlé
\begin_inset Quotes grd
\end_inset

 okrajem obrázku.
 Je pouze potřeba navíc ošetřit případy, kdy by při dělení na čtvrtiny vznikly
 prázdné bloky.
\end_layout

\begin_layout Standard
Dělení čtyřstromem se řídí jednoduchým principem.
 Na začátku je celý vstupní obrázek jeden cílový blok.
 Pak se rekurzivně pro každý blok zkouší nalézt dostatečně dobré zobrazení
 a v
\begin_inset space ~
\end_inset

případě neúspěchu je blok rozdělen na čtyři o
\begin_inset space ~
\end_inset

poloviční velikosti.
 Samozřejmě, bloky větší než nastavené maximum jsou rozděleny bez hledání
 zobrazení a u
\begin_inset space ~
\end_inset

bloků o
\begin_inset space ~
\end_inset

velikosti nastaveného minima se modul vždy spokojí s
\begin_inset space ~
\end_inset

nejlepším nalezeným zobrazením.
\end_layout

\begin_layout Paragraph
Heuristika
\end_layout

\begin_layout Standard
Byla zde jedna velká nevýhoda
\begin_inset space ~
\end_inset

--- původní algoritmus slepě zkoušel hledat zobrazení i pro bloky, pro které
 bylo zřejmé, že nemůže uspět.
 Proto zde může být dělení prováděno podle jednoduché heuristiky, která
 rychle odhadne (z
\begin_inset space ~
\end_inset

rozptylu hodnot v
\begin_inset space ~
\end_inset

bloku) chybu optimálního zobrazení.
 Pokud pro nějaký blok bylo hledáno dostatečně dobré zobrazení, ale neúspěšně,
 je blok dále dělen původním algoritmem.
 Pokud byl nějaký blok naopak spekulativně rozdělen a všem jeho následníkům
 se podařilo najít optimální zobrazení, pak se zkusí hledat zobrazení i
 pro něj a v
\begin_inset space ~
\end_inset

případě úspěchu je zpětně sloučen (to může způsobit kaskádu slučování).
 
\end_layout

\begin_layout Standard
Heuristické dělení dává stejný výsledek za předpokladu (který platí téměř
 vždy), že pokud je možné nalézt dostatečně dobré zobrazení pro blok, pak
 je to možné i pro jeho čtvrtiny.
 V
\begin_inset space ~
\end_inset

praxi představuje tato technika významné urychlení, přestože není heuristika
 moc přesná, například chyby bloků s
\begin_inset space ~
\end_inset


\begin_inset Quotes gld
\end_inset

náhodným
\begin_inset Quotes grd
\end_inset

 šumem jsou podhodnoceny a naopak chyby bloků s
\begin_inset space ~
\end_inset

jedním pozvolným nebo ostrým přechodem výrazně nadhodnoceny.
 Urychlení nastává zejména proto, že přeskočené hledání zobrazení pro velké
 bloky bývá časově velmi náročné, často kvůli nutnosti stavby složitých
 datových struktur.
\end_layout

\begin_layout Standard
Bylo by možné heuristiku ještě výrazně zpřesnit pomocí rozšíření rozhraní
 
\family typewriter
ISquare\SpecialChar \-
Encoder
\family default
 o
\begin_inset space ~
\end_inset

příslušnou odhadující metodu.
 Například implementace založené na mnohadimenzionálních prostorových datových
 strukturách by pak mohly odhadovat optimální chybu mnohem přesněji a také
 velmi rychle.
\end_layout

\begin_layout Paragraph
Způsob uložení
\end_layout

\begin_layout Standard
Efektivita uložení do proudu bytů je při kompresi obrazu velmi důležitá.
 Proto je nejprve uložena největší a nejmenší použitá 
\emph on
úroveň
\emph default
 (tedy ne nastavené limity) a potom při rekurzivním průchodu čtyřstromem
 je pro blok uložen jeden bit nastavený podle toho, zda blok byl nebo nebyl
 rozdělen.
 Bit se ukládá pouze pro bloky, kdy není možné informaci získat už z
\begin_inset space ~
\end_inset

uložené minimální a maximální 
\emph on
úrovně
\emph default
.
\end_layout

\begin_layout Standard
Cílové bloky jsou vraceny z
\begin_inset space ~
\end_inset

rozhraní v
\begin_inset space ~
\end_inset

pořadí jejich výskytu na Hilbertově křivce.
 Tím jsou sníženy vzájemné vzdálenosti po sobě jdoucích bloků a tedy i zefektivn
ěny diferenční metody používané v
\begin_inset space ~
\end_inset

implementaci rozhraní 
\family typewriter
ISquare\SpecialChar \-
Encoder
\family default
 (část
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Zobrazování"

\end_inset

).
\end_layout

\begin_layout Section
Výběr množiny zrojových bloků
\begin_inset CommandInset label
LatexCommand label
name "Implementace/Domény"

\end_inset


\end_layout

\begin_layout Subsubsection
ISquareDomains
\end_layout

\begin_layout Standard
Vytváření rozhraní vybírajícího množinu zdrojových bloků bylo obtížné.
 Zdrojové bloky lze volit mnoha různými způsoby.
 Pokud by ale bylo rozhraní příliš obecné, mohla by se velmi výrazně snížit
 rychlost komprese a dekomprese.
\end_layout

\begin_layout Standard
Rozhraní poskytuje několik matic pro cílové bloky, jejichž obsah je už zmenšen
 tak, že zbytek zobrazení mezi zdrojovými a cílovými bloky nemění rozměry.
 Poskytované zdrojové bloky jsou vždy čtverce o
\begin_inset space ~
\end_inset

hranách délky mocniny 2, které jsou pravidelně rozmístěny po matici.
 Omezení velikostí zdrojových bloků ve skutečnosti neomezuje velikosti cílových
 bloků, protože modul pro zobrazování (s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
ISquare\SpecialChar \-
Encoder
\family default
) nemusí využít celý blok.
 Pro každou z
\begin_inset space ~
\end_inset

těchto matic a pro každou 
\emph on
úroveň
\emph default
 bloku je rozhraním poskytnut rozestup - počet pixelů, o
\begin_inset space ~
\end_inset

který jsou vzdáleny odpovídající rohy zdrojových bloků v
\begin_inset space ~
\end_inset

obou souřadnicích.
\end_layout

\begin_layout Standard
Metody rozhraní umožňují inicializaci modulu pro daný 
\emph on
úkol
\emph default
, aktualizaci hodnot pixelů v
\begin_inset space ~
\end_inset

maticích pro zdrojové bloky (ze stavu 
\emph on
úkolu
\emph default
), vrácení seznamu těchto matic, ukládání a nahrávaní nastavení a dalších
 dat.
 Také je zde metoda pro zjištění hustoty pokrytí zdrojovými bloky pro všechny
 matice, danou úroveň a daný maximální počet zdrojových bloků.
\end_layout

\begin_layout Subsubsection
MStdDomains
\end_layout

\begin_layout Standard
Třída 
\family typewriter
MStdDomains
\family default
 implementuje rozhraní 
\family typewriter
ISquare\SpecialChar \-
Domains
\family default
 a nabízí mnoho možností nastavení.
\end_layout

\begin_layout Standard
Předně lze regulovat maximální množství zdrojových bloků v
\begin_inset space ~
\end_inset

závislosti na jejich 
\emph on
úrovni
\emph default
.
 Původní maximum platí pro 
\emph on
úroveň
\emph default
 2, pro vyšší lze nastavit míru poklesu (koeficient geometrické řady).
\end_layout

\begin_layout Paragraph
Druhy zdrojových bloků
\end_layout

\begin_layout Standard
Třída umožňuje vytvářet několik druhů matic pro zdrojové bloky.
 Základní matice jsou čtyř druhů: 
\emph on
klasické
\emph default
, 
\emph on
vodorovné
\emph default
, 
\emph on
svislé
\emph default
 a 
\emph on
kosočtvercové
\emph default
.
 Vzájemné poměry množství zdrojových bloků generovaných z
\begin_inset space ~
\end_inset

matic jednotlivých druhů může uživatel nastavit (přibližně).
\end_layout

\begin_layout Standard

\emph on
Klasické
\emph default
 matice vznikají zmenšením celého vstupu v
\begin_inset space ~
\end_inset

obou směrech na polovinu pomocí průměrování hodnot pixelů po čtveřicích.
 To je ve fraktální kompresi nejčastější metoda, protože je velmi jednoduchá,
 rychlá a dává v
\begin_inset space ~
\end_inset

praxi dobré výsledky.
 Další způsoby zmenšování jsou inspirovány především článkem 
\begin_inset CommandInset citation
LatexCommand cite
key "Aoue04"

\end_inset

, ale podobné návrhy lze najít i na mnoha jiných místech.
\end_layout

\begin_layout Standard

\emph on
Vodorovné
\emph default
 a 
\emph on
svislé
\emph default
 matice vznikají nerovnoměrným zmenšením celého vstupu v
\begin_inset space ~
\end_inset

obou směrech
\begin_inset space ~
\end_inset

--- v
\begin_inset space ~
\end_inset

jednom směru probíhá zmenšení na 
\begin_inset Formula $\nicefrac{1}{3}$
\end_inset

 a v
\begin_inset space ~
\end_inset

druhém směru na 
\begin_inset Formula $\nicefrac{2}{3}$
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ve starší implementaci projektu probíhalo zmenšování pouze v
\begin_inset space ~
\end_inset

jednom směru, což těsně porušovalo podmínku kontraktivity z
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "PIFS/Rychlá_konvergence"

\end_inset

.
 Při okrajovém nastavení pak bylo snadno možné dosáhnout obrázku, kde některé
 bloky konvergovaly velmi pomalu a k
\begin_inset space ~
\end_inset

chybnému vodorovně nebo svisle 
\begin_inset Quotes gld
\end_inset

pruhovanému
\begin_inset Quotes grd
\end_inset

 výsledku.
\end_layout

\end_inset

 Zmenšování probíhá výpočtem váženého průměru, kde jeden pixel vzniká ze
 tří celých a tří polovin pixelů, viz obrázek
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Domény/Náčrtek"

\end_inset

.
\end_layout

\begin_layout Standard

\emph on
Kosočtvercové
\emph default
 matice vznikají otáčením částí vstupu o
\begin_inset space ~
\end_inset


\begin_inset Formula $45^{\circ}$
\end_inset

 proti směru hodinových ručiček.
 Přes svůj název (odvozený z
\begin_inset space ~
\end_inset

anglického 
\emph on
diamond
\emph default
 z
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Aoue04"

\end_inset

) vznikají z
\begin_inset space ~
\end_inset

části o
\begin_inset space ~
\end_inset

tvaru pootočeného čtverce.
 Zde je použit jednoduchý způsob zmenšování
\begin_inset space ~
\end_inset

--- středy nových pixelů leží na některých rozích vstupních pixelů a jejich
 hodnota je spočtena jako průměr hodnot čtveřice vstupních pixelů sdílející
 daný roh.
 Při čtvercovém vstupu se takto využije jen polovina jeho plochy a pokud
 by poměr stran byl větší, bylo by to ještě méně.
 Proto jsou takové vstupy pokryty více 
\emph on
kosočtvercovými
\emph default
 maticemi rozmístěnými tak, aby nevznikaly identické zdrojové bloky, viz
 obrázek
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Domény/Náčrtek"

\end_inset

.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Implementace/Domény/Náčrtek"

\end_inset

Schéma zmenšování pro 
\emph on
klasické
\emph default
, 
\emph on
svislé
\emph default
 a 
\emph on
kosočtvercové
\emph default
 zdrojové bloky.
 Tenké čáry značí původní pixely, čárkované značí jejich pokrytí pixely
 po zmenšení.
\begin_inset VSpace defskip
\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename dom_regular.eps
	width 4cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename dom_hv.eps
	width 4cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename dom_diamond.eps
	width 4cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Vícenásobné zmenšování
\end_layout

\begin_layout Standard
Ze základních matic lze ještě vytvářet další, ještě více zmenšené (a z
\begin_inset space ~
\end_inset

nich rekurzivně další).
 Použit je stejný algoritmus jako pro vytváření 
\emph on
klasických
\emph default
 matic.
 Lze navíc zvolit, jak velké množství zdrojových bloků bude z
\begin_inset space ~
\end_inset

těchto matic vytvořeno
\begin_inset space ~
\end_inset

--- buď stejné ze všech zmenšujících kroků (přestože ty více zmenšené mají
 menší plochu) nebo se bude s
\begin_inset space ~
\end_inset

každým krokem množství vytvořených bloků zmenšovat na polovinu nebo se vícenásob
né zmenšování nepoužije.
\end_layout

\begin_layout Standard
Kvůli obecnosti návrhu rozhraní se i při dekompresi nezobrazují bloky rovnou,
 ale přes tyto matice, takže počet matic pro zdrojové bloky významně ovlivňuje
 rychlost dekomprese (na rozdíl od komprese, kde nehraje znatelnou roli).
\end_layout

\begin_layout Section
Hledání optimálních zobrazení
\begin_inset CommandInset label
LatexCommand label
name "Implementace/Zobrazování"

\end_inset


\end_layout

\begin_layout Standard
Hledání optimálních zobrazení je nejdůležitější část celého kompresního
 procesu.
 Zde se nejvíce ovlivňuje kvalita výsledku a také stráví nejvíce výpočetního
 času.
\end_layout

\begin_layout Subsubsection
ISquareEncoder
\end_layout

\begin_layout Standard

\family typewriter
ISquareEncoder
\family default
 je rozhraní pro správu zobrazení mezi zdrojovými bloky generovanými modulem
 s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
ISquare\SpecialChar \-
Domains
\family default
 a cílovými bloky vytvářenými modulem s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
ISquare\SpecialChar \-
Ranges
\family default
.
\end_layout

\begin_layout Standard
Rozhraní obsahuje metody pro inicializaci před (de)kompresí 
\emph on
úkolu
\emph default
, pro hledání optimálního zobrazení do daného cílového bloku, pro dokončení
 komprese a pro provádění dekódovacích akcí (vyčištění obrázku nebo iterování
 zobrazení).
 Dále jsou zde metody pro uložení a nahrátí nastavení, pro zjištění počtu
 ukládacích fází a pro uložení nebo nahrátí dat jednotlivých fází (význam
 fází je vysvětlen v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/IShapeTransformer"

\end_inset

).
\end_layout

\begin_layout Paragraph
MStdEncoder
\end_layout

\begin_layout Standard
Třída 
\family typewriter
MStdEncoder
\family default
 implementuje rozhraní podle modelu upravených zobrazení popsaného v
\begin_inset space ~
\end_inset

části
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "PIFS/Použitý_model"

\end_inset

 a využívá vzorců odvozených v
\begin_inset space ~
\end_inset

kapitole
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení"

\end_inset

.
\end_layout

\begin_layout Standard
Při hledání optimálního zdrojového bloku pro daný cílový blok (při kompresi)
 jsou nejprve předpočítány různé údaje z
\begin_inset space ~
\end_inset

hodnot pixelů v
\begin_inset space ~
\end_inset

bloku.
 Pak je postupně pro všechny zdrojové bloky předané predikčním modulem s
\begin_inset space ~
\end_inset

rozhraním 
\family typewriter
IStd\SpecialChar \-
Enc\SpecialChar \-
Pre\SpecialChar \-
dictor
\family default
 (zvolen uživatelem) počítána chyba zobrazení mezi dvojicí a je zapamatována
 nejlepší kombinace.
 Uživatel také může zvolit, zda bude zkoušeno osm způsobů otočení nebo jen
 identita, zda budou povoleny záporné lineární koeficienty, jak moc budou
 penalizovány vysoké lineární koeficienty (diskutováno v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Chyba_zobrazení/Penalizace"

\end_inset

), zda budou započítány chyby vzniklé kvantizací, jak bude omezena absolutní
 hodnota lineárních koeficientů, jak nízká dosažená chyba bude stačit pro
 okamžité ukončení hledání, jak jemná bude kvantizace průměrů a směrodatných
 odchylek a jaké moduly se budou starat o
\begin_inset space ~
\end_inset

ukládání kvantizovaných hodnot.
\end_layout

\begin_layout Standard
Moduly pro ukládání kvantizovaných průměrů a směrodatných odchylek cílových
 bloků splňují rozhraní 
\family typewriter
IInt\SpecialChar \-
Codec
\family default
 a jsou zapojeny proto, že po sobě jdoucí hodnoty mají vysokou pravděpodobnost
 být sobě blízké.
 To zajištuje například modul 
\family typewriter
MQuad\SpecialChar \-
Tree
\family default
 (popsán v
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/MQuadTree"

\end_inset

), který řadí bloky podle jejich pořadí na Hilbertově křivce, což výrazně
 zvyšuje lokalitu posloupnosti.
 Tyto vlastnosti ukládaných posloupností lze využít různými způsoby ke zvýšení
 efektivity jejich uložení, a proto je tato práce oddělena do jiných modulů.
\end_layout

\begin_layout Standard
Celá chyba lze pro všechny konfigurace snadno spočítat ze součtu hodnot
 ve zdrojovém bloku, součtu jejich druhých mocnin, z
\begin_inset space ~
\end_inset

předpočítaných údajů o
\begin_inset space ~
\end_inset

cílovém bloku a ze součtu součinů hodnot odpovídajících pixelů zdrojového
 a cílového bloku.
 Tento součet součinů je jediný potřebný údaj, který nelze získat v
\begin_inset space ~
\end_inset

konstantním čase.
 Ostatní hodnoty jsou spočteny snadno, nejčastěji pomocí struktur zmíněných
 v
\begin_inset space ~
\end_inset

části 
\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/Matice"

\end_inset

.
\end_layout

\begin_layout Standard
Uživatel má mnoho možností pro změnu způsobu výpočtu chyby mezi dvojicí
 bloků.
 Zjišťovat konfiguraci a vyhodnocovat mnoho podmínek při každém výpočtu
 chyby by způsobilo výrazné zpomalení.
 Proto jsou možnosti realizovány jako šablonové parametry funkce počítající
 chybu, která je instanciována pro každou kombinaci parametrů.
 Na začátku hledání optimálního zdrojového bloku pro cílový blok se podle
 konfigurace zjistí adresa příslušné funkce, která je pak vždy volána.
 Každá z
\begin_inset space ~
\end_inset

funkcí je tedy kompilátorem optimalizována zvlášť a již nevyhodnocuje žádné
 podmínky způsobené konfigurací.
 Velké množství instanciovaných funkcí zvyšuje kromě rychlosti také velikost
 binárního souboru, ale díky tomu, že funkce obsahují jen nejnutnější výpočty,
 je tento přínos pro celkovou velikost souboru nevýznamný.
\end_layout

\begin_layout Standard
Modul implementuje podporu pro progresivní dekódování založenou na ukládácích
 fázích zavedených v
\begin_inset space ~
\end_inset

části
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Implementace/IShapeTransformer"

\end_inset

.
 V
\begin_inset space ~
\end_inset

první fázi jsou uloženy průměrné hodnoty všech bloků.
 Průměry zaberou málo místa, ale už z
\begin_inset space ~
\end_inset

nich samotných lze zrekonstruovat použitelný náhled výsledku.
 V
\begin_inset space ~
\end_inset

druhé fázi jsou uloženy směrodatné odchylky bloků.
 V
\begin_inset space ~
\end_inset

třetí, poslední, fázi je uložen zbytek potřebných informací pro cílové bloky
 s
\begin_inset space ~
\end_inset

nenulovou směrodatnou odchylkou
\begin_inset space ~
\end_inset

--- vždy bit pro znaménko lineárního koeficientu a tři bity kódující otočení
 (jen pokud jsou potřeba) a index zdrojového bloku.
\end_layout

\begin_layout Chapter*
Reference
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "fractals"
options "plain"

\end_inset


\end_layout

\begin_layout Section*
Internetové zdroje
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "internet"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
