#LyX 1.5.7 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass report
\begin_preamble
%\usepackage[utf-8]{inputenc} % nastavuje použité kódování, uživatelé Windows zamění latin2 za cp1250
%\usepackage[czech]{babel}
%\usepackage{a4wide} % nastavuje standardní evropský formát stránek A4
%\usepackage{index} % nutno použít v případě tvorby rejstříku balíčkem makeindex
%\usepackage{fancybox} % umožňuje pokročilé rámečkování :-)
\usepackage[final]{graphicx} % nezbytné pro standardní vkládání obrázků do dokumentu

\usepackage[bindingoffset=1.5cm]{geometry} % nastavení dané velikosti okrajů
%[outer=2.5cm,inner=4cm,top=2cm,bottom=3cm]

%\newindex{default}{idx}{ind}{Rejstřík} % zavádí rejstřík v případě použití balíku index


\def\bcTitle{Moderní metody fraktální komprese obrazu}  
\def\bcTitleEn{Contemporary Methods in Fractal Image Compression}
\def\bcAuthor{Vladimír Čunát} 
\def\bcAuthorEn{Vladimir Cunat} 
\def\bcTeacher{RNDr.~Tomáš Dvořák, CSc.}
\def\bcTeacherMail{Tomas.Dvorak@mff.cuni.cz}
\def\bcKSVI{Kabinet software a výuky informatiky}
\def\bcKSVIen{Department of Software and Computer Science Education}

\title{\bcTitle}
\author{\bcAuthor}
\date{\today}

\usepackage[ 
pdfauthor={\bcAuthorEn}, 
pdftitle={\bcTitleEn}, 
pdfcreator={Lyx}, 
pdfsubject={Fractal Image Compression}, 
pdfkeywords={image compression,fractals} 
]{hyperref}


\usepackage{amsthm}
\newtheorem*{veta}{Věta}
\end_preamble
\options notitlepage,12pt
\language czech
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\paperwidth 0cm
\paperheight 0cm
\leftmargin 4cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 1cm
\headsep 1cm
\footskip 1.5cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Include \input{bc_start.tex}
preview false

\end_inset


\newpage

\end_layout

\begin_layout Chapter
Úvod
\end_layout

\begin_layout Standard
<Představení práce, motivace a přehled obsahu kapitol.>
\end_layout

\begin_layout Chapter
Vývoj a principy fraktální komprese obrazu
\end_layout

\begin_layout Standard
V této kapitole bude používáno následující značení:
\end_layout

\begin_layout Description
potenční\InsetSpace ~
množina 
\begin_inset Formula $2^{X}=\left\{ A:\, A\subseteq X\right\} $
\end_inset


\end_layout

\begin_layout Description
iterace\InsetSpace ~
zobrazení mějme zobrazení 
\begin_inset Formula $f:\, X\rightarrow X$
\end_inset

, pak 
\begin_inset Formula $f^{k}:\, X\rightarrow X$
\end_inset

 je definováno tak, že 
\begin_inset Formula $f^{0}$
\end_inset

 je identita a
\begin_inset Formula \[
\forall k\geq1\quad\forall x\in X\quad f^{k}\left(x\right)=f\left(f^{k-1}\left(x\right)\right)\]

\end_inset


\end_layout

\begin_layout Description
kontraktivita\InsetSpace ~
zobrazení 
\begin_inset Formula $f:\, X\rightarrow X$
\end_inset

 zobrazení na metrickém prostoru 
\begin_inset Formula $X$
\end_inset

 s\InsetSpace ~
metrikou 
\begin_inset Formula $d$
\end_inset

 je kontraktivní, pokud
\begin_inset Formula \[
\exists s<1\quad\forall x,y\in X\quad d\left(x,y\right)\leq s\, d\left(f\left(x\right),f\left(y\right)\right)\]

\end_inset

takové 
\begin_inset Formula $s$
\end_inset

 budeme nazývat faktorem kontraktivity 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Section
IFS
\end_layout

\begin_layout Standard
Základy fraktálové komprese byly položeny v druhé polovině 80.\InsetSpace \thinspace{}
let, kdy Barnsley
 studoval systémy iterovaných funkcí (IFS).
 IFS je množina bodů 
\begin_inset Formula $A$
\end_inset

 v\InsetSpace ~
úplném metrickém prostoru 
\begin_inset Formula $X$
\end_inset

 definována pomocí souboru kontraktivních zobrazení 
\begin_inset Formula $X$
\end_inset

 do sebe.
 Mějme soubor zobrazení 
\begin_inset Formula $f_{i}:X\rightarrow X$
\end_inset

 pro 
\begin_inset Formula $i\in J$
\end_inset

 a definujme jejich sjednocení 
\begin_inset Formula $f:2^{X}\rightarrow2^{X}$
\end_inset

 tak, že pro 
\begin_inset Formula $B\subseteq X$
\end_inset

 
\begin_inset Formula $f\left(B\right)=\left\{ f_{i}\left(b\right)\mid i\in J,\ b\in B\right\} $
\end_inset

.
 Na 
\begin_inset Formula $2^{X}$
\end_inset

 lze definovat metriku tak, abychom dostali zase úplný metrický prostor
 a zobrazení 
\begin_inset Formula $f$
\end_inset

 bylo kontraktivní, jak je ukázáno například v\InsetSpace ~

\begin_inset LatexCommand cite
key "Barn88b"

\end_inset

 pomocí Hausdorffovy metriky.
 To podle Banachovy věty o\InsetSpace ~
pevném bodě dává, že takto vzniklé zobrazení 
\begin_inset Formula $f$
\end_inset

 má právě jeden pevný bod, kterým je právě hledaná množina 
\begin_inset Formula $A$
\end_inset

, často nazývaná atraktor nebo fraktál
\begin_inset Foot
status collapsed

\begin_layout Standard
fraktály lze konstruovat i jinými způsoby než pomocí IFS
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
IFS mají několik zajímavých vlastností.
 Pro získání atraktoru stačí znát zobrazení 
\begin_inset Formula $f$
\end_inset

 a iterovat ho na libovolné neprázdné kompaktní podmnožině prostoru 
\begin_inset Formula $X$
\end_inset

.
 Navíc vzniklé fraktály mohou mít detailní kresbu při libovolném přiblížení,
 přestože jejich matematický popis je velmi malý, takže pro tyto speciální
 obrázky lze dosáhnout libovolně velkého kompresního poměru.
 Mezi nejznámější IFS patří Barnsleyho kapradina, generovaná v 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

 pomocí čtyř afinních zobrazení.
 Barnsley zkoumal, zda by nebylo možné proces obrátit\InsetSpace ~
--- k\InsetSpace ~
danému obrázku
 najít soubor zobrazení, jehož pevný bod by obrázku byl velmi blízký.
 Pak by místo souboru pixelů stačil pro popis obrázku jen popis těchto zobrazení.
\end_layout

\begin_layout Standard
Zde se používá takzvaná kolážová věta, uvedená například v\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

, která dává horní odhad na odchylku atraktoru od požadovaného obrázku:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{veta}
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $f$
\end_inset

 je zobrazení úplného metrického prostoru do sebe, které je kontraktivní
 s\InsetSpace ~
faktorem 
\begin_inset Formula $s<1$
\end_inset

 v\InsetSpace ~
metrice 
\begin_inset Formula $d$
\end_inset

, pak 
\begin_inset Formula \[
d\left(A,\lim_{n\rightarrow\infty}f^{n}\left(A\right)\right)\;\le\;\frac{1}{1-s}\, d\left(A,f\left(A\right)\right)\]

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{veta}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Díky tomu stačí hledat zobrazení, která obrázek transformují a přitom ho
 změní co nejméně.
 Pro jistotu konvergence dokonce stačí,
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 že 
\begin_inset Formula $f^{k}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 je kontraktivní s\InsetSpace ~
faktorem 
\begin_inset Formula $s<1$
\end_inset

 pro nějaké 
\begin_inset Formula $k$
\end_inset

.
 Ukázalo se, že největší problém je v\InsetSpace ~
tom, že na rozdíl od klasických IFS
 málokterý obrázek lze charakterizovat jako sjednocení několika transformovaných
 zmenšenin celého obrázku.
 Bylo sice možné obrázek rozdělit na menší kusy charakterizované IFS, ale
 tuto metodu se nepodařilo zautomatizovat.
\end_layout

\begin_layout Section
PIFS
\end_layout

\begin_layout Standard
Pro kompresi obrázků také bylo nutné najít lepší model, než množinu bodů
 v\InsetSpace ~

\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

.
 Jedna z\InsetSpace ~
možností reprezentace obrázků ve stupních šedi je funkce tvaru 
\begin_inset Formula $g:I^{2}\rightarrow I$
\end_inset

, kde 
\begin_inset Formula $I$
\end_inset

 je značení pro interval 
\begin_inset Formula $\left[0,1\right]\subset\mathbb{R}$
\end_inset

.
 Zde budeme analogicky hledat soubor operátorů takový, aby jejich sjednocením
 vznikl operátor 
\begin_inset Formula $F$
\end_inset

 s\InsetSpace ~
pevným bodem co nejblíže danému obrázku (jeho funkci).
 Aby bylo zaručeno, že sjednocení lze provést, v\InsetSpace ~
PIFS (partitioned IFS) je
 prostor obrázku rozdělen na disjunktní části
\begin_inset Formula \[
\forall i\in J\quad R_{i}\subset I^{2},\qquad\bigcup_{i\in J}R_{i}=I^{2},\qquad\forall i,j\in J\quad i\neq j\rightarrow R_{i}\cap R_{j}=\emptyset\]

\end_inset

a operátory jsou tvaru 
\begin_inset Formula $F_{i}:\left(I^{2}\rightarrow I\right)\rightarrow\left(R_{i}\rightarrow I\right)$
\end_inset

.
\end_layout

\begin_layout Standard
PIFS, které zavedl Jacquin, dnes tvoří základ naprosté většiny technik pro
 fraktální kompresi obrazu.
 Pro zjednodušení se zde uvažují pouze afinní operátory, kde se navíc vzájemně
 neovlivňuje transformace polohy s\InsetSpace ~
transformací barvy.
 Formální zápis aplikace operátoru na obrázek 
\begin_inset Formula $g:I^{2}\rightarrow I$
\end_inset

 
\begin_inset Formula \[
F_{i}g=h_{i},\qquad h_{i}:R_{i}\rightarrow I,\qquad h_{i}\left(\left[\begin{array}{c}
x\\
y\end{array}\right]\right)=\left(c_{i}\circ g\circ w_{i}\right)\left(\left[\begin{array}{c}
x\\
y\end{array}\right]\right)\]

\end_inset


\begin_inset Formula \[
\text{pro nějaká afinní zobrazení\quad}w_{i}:R_{i}\rightarrow I^{2}\mbox{\quad a\quad}c_{i}:I\rightarrow\mathbb{R}\]

\end_inset

Za 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $R_{i}$
\end_inset

 se volí souvislé části obrazu, typicky čtverce o\InsetSpace ~
straně délky 
\begin_inset Formula $2^{k}$
\end_inset

, a\InsetSpace ~
nazývají se cílové bloky.
 Díky spojitosti 
\begin_inset Formula $w_{i}$
\end_inset

 jsou 
\begin_inset Formula $D_{i}=w_{i}\left(R_{i}\right)$
\end_inset

 také souvislé části obrazu a nazývají se zdrojové bloky.
\begin_inset Foot
status collapsed

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
značení pochází z\InsetSpace ~
anglických termínů 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
domain block
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 a 
\family default
\series default
\shape default
\size default
\emph on
\bar default
\noun default
\color inherit
range block
\end_layout

\end_inset

 Transformace 
\begin_inset Formula $w_{i}$
\end_inset

 určuje, která část obrazu bude zobrazena do cílového bloku a také jak bude
 otočena a případně symetricky převrácena.
 Za 
\begin_inset Formula $w_{i}$
\end_inset

 se volí kontraktivní zobrazení, přestože to pro níže uvedené tvrzení o\InsetSpace ~
konvergen
ci není potřeba.
 Tato kontraktivita mimo jiné způsobuje vytváření nových detailů při přiblížení.
\end_layout

\begin_layout Subsection
Konvergence PIFS
\end_layout

\begin_layout Standard
Pro konvergenci a horní odhad chyby PIFS modelu lze zase použít kolážovou
 větu.
 Následující důkaz je modifikací důkazu uvedeného v\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

.
 Zde se hodí metrika
\begin_inset Formula \[
d_{s\mathrm{up}}\left(g_{1},g_{2}\right)=\sup_{\vec{z}\in I^{2}}\left\{ \left|g_{1}\left(\vec{z}\right)-g_{2}\left(\vec{z}\right)\right|\right\} \]

\end_inset

Postačí, aby existovalo 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $s<1$
\end_inset

 takové, že každé ze zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 má lineární člen 
\begin_inset Formula $a_{i}:\;\left|a_{i}\right|\le s$
\end_inset

.
 Pak pro libovolné obrázky 
\begin_inset Formula $g_{1},g_{2}:I^{2}\rightarrow I$
\end_inset

 a každý bod 
\begin_inset Formula $\vec{z}\in I^{2}$
\end_inset

 existuje právě jedno 
\begin_inset Formula $R_{i}$
\end_inset

 takové, že 
\begin_inset Formula $\vec{z}\in R_{i}$
\end_inset

 a platí 
\begin_inset Formula \[
\left|\left(F_{i}g_{1}\right)\left(\vec{z}\right)-\left(F_{i}g_{2}\right)\left(\vec{z}\right)\right|\quad\le\quad s\left|\left(g_{1}\circ w_{i}\right)\left(\vec{z}\right)-\left(g_{2}\circ w_{i}\right)\left(\vec{z}\right)\right|\quad\leq\quad s\, d_{s\mathrm{up}}\left(g_{1},g_{2}\right)\]

\end_inset

Z toho už plyne kontraktivita celého operátoru 
\begin_inset Formula $F:\; d_{s\mathrm{up}}\left(Fg_{1},Fg_{2}\right)\;\le\; s\, d_{s\mathrm{up}}\left(g_{1},g_{2}\right)$
\end_inset

 a díky tomu lze použít kolážovou větu.
\end_layout

\begin_layout Standard
Ukazuje se ale, že pro použití v\InsetSpace ~
implementaci je tento odhad příliš volný,
 stejně jako použitá metrika nedává dobré vizuální výsledky.
\end_layout

\begin_layout Subsection
Optimální zobrazení
\end_layout

\begin_layout Standard
Pro daný cílový blok 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $R_{i}$
\end_inset

 se volí afinní zobrazení 
\begin_inset Formula $w_{i}$
\end_inset

 tak, aby mapovalo blok na jeden ze souboru zdrojových bloků, který bývá
 pevně daný kvůli zjednodušení ukládání a vyhledávání.
 Tato volba je hlavním zdrojem výpočetní složitosti celé komprese a jejímu
 urychlení byla věnována značná část výzkumu v\InsetSpace ~
oblasti.
 Obecně je snaha zvolit takový zdrojový blok 
\begin_inset Formula $D_{i}$
\end_inset

, že spolu s\InsetSpace ~
optimálním barevným zobrazením 
\begin_inset Formula $c_{i}$
\end_inset

 bude pro složený operátor 
\begin_inset Formula $F_{i}g=\left(c_{i}\circ g\circ w_{i}\right)$
\end_inset

 vzdálenost 
\begin_inset Formula $d\left(\ c_{i}\circ g\circ w_{i},\ g\ \right)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
měřená na 
\begin_inset Formula $R_{i}$
\end_inset

 co nejmenší.
\end_layout

\begin_layout Standard
Volba optimálního zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 a tedy i následně volba 
\begin_inset Formula $w_{i}$
\end_inset

 je silně závislá na použité metrice.
 Ve fraktální kompresi se téměř výhradně používá RMSE metrika (zde uvedena
 v\InsetSpace ~
nebvyklé spojité podobě):
\begin_inset Note Note
status open

\begin_layout Standard
existence integrálu, metoda nejmenších čtverců
\end_layout

\end_inset


\begin_inset Formula \[
d_{\mathrm{RMSE}}\left(g_{1},g_{2}\right)=\sqrt{\frac{\iintop_{R_{i}}\left[g_{1}\left(x,y\right)-g_{2}\left(x,y\right)\right]^{2}\,\mathrm{d}x\mathrm{\, d}y}{\iintop_{R_{i}}\,\mathrm{d}x\mathrm{\, d}y}}\]

\end_inset

Její hlavní výhody i nevýhody jsou dány tím, že se vždy berou v\InsetSpace ~
úvahu pouze
 sobě odpovídající body 
\begin_inset Formula $g_{1}\left(x,y\right)$
\end_inset

 a 
\begin_inset Formula $g_{2}\left(x,y\right)$
\end_inset

.
 To umožnuje velmi jednoduchou a rychlou práci s\InsetSpace ~
metrikou a také optimalizaci
 v\InsetSpace ~
ní, na druhou stranu díky tomu pro větší bloky nedává metrika výsledky
 odpovídající vizuálnímu rozdílu.
 Možnosti použití alternativních metrik jsou zmíněny v\InsetSpace ~

\begin_inset LatexCommand vref
reference "Články-Zlepšení_vzhledu-Další_metody"

\end_inset

.
\end_layout

\begin_layout Standard
Při použití RMSE existuje právě jedno optimální 
\begin_inset Formula $c_{i}$
\end_inset

 a lze ho (pro dané 
\begin_inset Formula $g$
\end_inset

 a 
\begin_inset Formula $w_{i}$
\end_inset

) snadno spočítat analyticky.
 To platí za předpokladu, že 
\begin_inset Formula $g\circ w_{i}$
\end_inset

 není konstantní na 
\begin_inset Formula $R_{i}$
\end_inset

 (tj.\InsetSpace ~

\begin_inset Formula $g$
\end_inset

 není konstantní na 
\begin_inset Formula $D_{i}$
\end_inset

)\InsetSpace ~
--- jinak by se jednalo o\InsetSpace ~
aproximaci konstantním blokem, volba lineárního
 koeficientu by byla libovolná a výsledek vždy horší, než při výběru jakéhokoliv
 nekonstantního zdrojového bloku.
 Podrobnosti jsou pro diskrétní případ rozebrány v\InsetSpace ~
části <odkaz na kapitolu
 o\InsetSpace ~
encoderu>.
\end_layout

\begin_layout Subsection
Rychlá konvergence
\end_layout

\begin_layout Standard
Fraktálová komprese v\InsetSpace ~
této podobě stále trpěla jedním skrytým problémem.
 Při dodržení kontraktivity všech zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 kolážová věta sice zaručovala, že obrázek zkonverguje (v\InsetSpace ~
prostoru všech
 obrázků s\InsetSpace ~
libovolnou metrikou) a nebude se příliš lišit, ale nijak neomezovala
 počet nutných iteračních kroků.
 Ukázalo se, že tento problém není jen teoretický\InsetSpace ~
--- i\InsetSpace ~
při přísnějších omezeních
 na kontraktivitu bylo pro některé obrázky nutné provádět mnoho desítek
 iterací než změny přestaly být okem viditelné.
\end_layout

\begin_layout Standard
Řešení tohoto problému bylo publikováno v\InsetSpace ~

\begin_inset LatexCommand cite
key "Oien94"

\end_inset

 a podrobněji rozebráno v\InsetSpace ~
6.\InsetSpace ~
kapitole\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

.
 Jedná se jen o\InsetSpace ~
drobnou modifikaci barevného zobrazení.
 Pokud bylo původní optimální barevné zobrazení ve tvaru 
\begin_inset Formula $c_{i}\left(z\right)=p_{i}\, z+q_{i}$
\end_inset

, pak místo ukládání 
\begin_inset Formula $p_{i}$
\end_inset

 i 
\begin_inset Formula $q_{i}$
\end_inset

 je uloženo 
\begin_inset Formula $p_{i}$
\end_inset

 a průměrná barva bloku 
\begin_inset Formula $R_{i}$
\end_inset

.
 Nové zobrazení pak znormalizuje barvu zdrojového bloku 
\begin_inset Formula $D_{i}$
\end_inset

 odečtením jeho aktuálního průměru, výsledek vynásobí lineárním koeficienem
 
\begin_inset Formula $p_{i}$
\end_inset

 a přičte předpočítanou průměrnou barvu bloku 
\begin_inset Formula $R_{i}$
\end_inset

 ve vstupním obrázku.
\end_layout

\begin_layout Standard
Formálně bude zobrazení vypadat 
\begin_inset Formula \[
\bar{c_{i}}\left(z\right)=p_{i}\left(z-\frac{\iintop_{D_{i}}\bar{g}\left(x,y\right)\,\mathrm{d}x\mathrm{\, d}y}{\iintop_{D_{i}}\,\mathrm{d}x\mathrm{\, d}y}\right)+\frac{\iintop_{R_{i}}g\left(x,y\right)\,\mathrm{d}x\mathrm{\, d}y}{\iintop_{R_{i}}\,\mathrm{d}x\mathrm{\, d}y}\mbox{,}\]

\end_inset

kde 
\begin_inset Formula $g$
\end_inset

 značí vstupní obrázek a 
\begin_inset Formula $\bar{g}$
\end_inset

 právě dekódovaný obrázek z\InsetSpace ~
předchozí iterace.
 Je důležité, že zatímco druhý zlomek je uložený v\InsetSpace ~
charakteristice zobrazení
 a je stále stejný, první zlomek se může měnit s\InsetSpace ~
každou iterací, takže z\InsetSpace ~
matematic
kého hlediska se 
\begin_inset Formula $\bar{c_{i}}$
\end_inset

 chová pokaždé jako jiné zobrazení.
\end_layout

\begin_layout Standard
V\InsetSpace ~
rámci jedné iterace je ale 
\begin_inset Formula $\bar{c_{i}}$
\end_inset

 stále afinní zobrazení.
 Navíc lze snadno ukázat, že při použití RMSE metriky optimální afinní zobrazení
 
\begin_inset Formula $c_{i}$
\end_inset

 vždy zobrazuje průměnou barvu 
\begin_inset Formula $D_{i}$
\end_inset

 na průměrnou barvu 
\begin_inset Formula $R_{i}$
\end_inset

, takže když 
\begin_inset Formula $\bar{g}$
\end_inset

 konverguje k\InsetSpace ~

\begin_inset Formula $g$
\end_inset

, pak i\InsetSpace ~

\begin_inset Formula $\bar{c_{i}}$
\end_inset

 konverguje k\InsetSpace ~

\begin_inset Formula $c_{i}$
\end_inset

.
 
\end_layout

\begin_layout Standard
V tomto přístupu je tedy iterační operátor složitější na vyhodnocení, ale
 má lepší vlastnosti, například efektivnější ukládání koeficientů zobrazení
 díky jejich menší korelaci.
 Koeficienty 
\begin_inset Formula $q_{i}$
\end_inset

 zobrazení 
\begin_inset Formula $c_{i}$
\end_inset

 byla většinou v\InsetSpace ~
absolutní hodnotě malá čísla, ale mohla se pohybovat ve
 velkém rozsahu.
 Průměrná barva bloku se může pohybovat jen v\InsetSpace ~
rozmezí 
\begin_inset Formula $\left[0,1\right]$
\end_inset

 a má jasnější význam\InsetSpace ~
--- to pomáhá při volbě způsobu kvantizace při uložení
 do souboru a umožnuje například využít toho, že sousední bloky budou mít
 pravděpodobně blízkou barvu.
\end_layout

\begin_layout Standard
Další výhodou je mnohem rychlejší a jistější konvergence.
 Je vidět, že po každé iteraci mají všechny bloky 
\begin_inset Formula $R_{i}$
\end_inset

 správnou průměrnou barvu.
 Tím se vzhled zdrojových bloků 
\begin_inset Formula $D_{i}$
\end_inset

 už po první iteraci dostane blízko vzorovému obrázku, což se při další
 iteraci promítne do cílových bloků 
\begin_inset Formula $R_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
Ve\InsetSpace ~
výše odkazovaných publikacích je ukázáno, že po takovéto úpravě barevných
 zobrazení iterování konverguje ke stejnému výsledku a také, že za trochu
 silnějších předpokladů než zde uvedené bude potřebný počet iterací malý
 a bude záviset pouze na velikostech zdrojových a cílových bloků.
 Používá se zde diskrétní model obrázku\InsetSpace ~
--- posloupnost reálných čísel, kde
 cílové bloky jsou tvořeny 
\begin_inset Formula $2^{b_{i}}$
\end_inset

 po sobě jdoucími hodnotami a zdrojové bloky o\InsetSpace ~
velikosti 
\begin_inset Formula $2^{d_{i}}$
\end_inset

 jsou tvořeny několika po sobě jdoucími cílovými bloky.
 Zmenšování bloků vždy probíhá zprůměrováním 
\begin_inset Formula $2^{d_{i}-b_{i}}$
\end_inset

 po sobě jdoucích hodnot.
\end_layout

\begin_layout Standard
Na rozdíl od konvergence založené na kolážové větě je důkaz proveden bez
 jakéhokoliv omezení na kontraktivitu barevných zobrazení 
\begin_inset Formula $\bar{c_{i}}$
\end_inset

, což umožnuje mnohem přesnější aproximaci bloků s\InsetSpace ~
ostrými přechody bez ztráty
 jistoty konvergence.
 Zde se naopak využívá kontraktivity transformací 
\begin_inset Formula $w_{i}$
\end_inset

.
\end_layout

\begin_layout Subsection
Úprava lineárních koeficientů
\begin_inset Note Note
status open

\begin_layout Standard
značení konvergence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Podobným způsobem, jako byly konstantní koeficienty barevných zobrazení
 nahrazeny průměry, lze také lineární koeficienty nahradit směrodatnými
 odchylkami\InsetSpace ~
--- barvy zdrojových bloků jsou vyděleny svou směrodatnou odchylkou
 a vynásobeny cílovou směrodatnou odchylkou.
 Stále budeme vycházet z\InsetSpace ~
RMSE metriky.
\end_layout

\begin_layout Standard
V\InsetSpace ~
následujících výpočtech budeme pro zjednodušení pracovat s\InsetSpace ~
diskrétním modelem
 obrázku (vektorem hodnot), přestože analogická odvození lze udělat s\InsetSpace ~
dosud
 upřednostňovaným spojitým modelem.
  Bude použito statistické značení, které je názornější:
\end_layout

\begin_layout Description
zdrojové\InsetSpace ~
a\InsetSpace ~
cílové\InsetSpace ~
bloky 
\begin_inset Formula $x\mbox{ a }y$
\end_inset

, oba mají pixely indexované od 
\begin_inset Formula $1$
\end_inset

 do 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Description
zdrojový\InsetSpace ~
blok\InsetSpace ~
z\InsetSpace ~
předchozí\InsetSpace ~
iterace 
\begin_inset Formula $\bar{x}$
\end_inset

, používán stejně jako 
\begin_inset Formula $x\mbox{ a }y$
\end_inset


\end_layout

\begin_layout Description
výběrová\InsetSpace ~
směrodatná\InsetSpace ~
odchylka 
\begin_inset Formula ${\displaystyle s_{x}=\frac{1}{n-1}\left(\sum_{i=1}^{n}x_{i}^{2}-\frac{1}{n}\left(\sum_{i=1}^{n}x_{i}\right)^{2}\right)}$
\end_inset


\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Description
výběrová\InsetSpace ~
kovariance 
\begin_inset Formula ${\displaystyle q_{x,y}=\frac{1}{n-1}\left(\sum_{i=1}^{n}x_{i}y_{i}-\frac{1}{n}\sum_{i=1}^{n}x_{i}\sum_{i=1}^{n}y_{i}\right)}$
\end_inset


\end_layout

\begin_layout Description
výběrová\InsetSpace ~
korelace 
\begin_inset Formula ${\displaystyle r_{x,y}=\frac{q_{x,y}}{s_{x}s_{y}}}$
\end_inset


\end_layout

\begin_layout Standard
Zde budeme vycházet ze vztahů odvozených v\InsetSpace ~
<kapitola o encoderu> přepsaných
 do výše uvedené notace.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Optimální lineární koeficient 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit

\begin_inset Formula ${\displaystyle p=\frac{q_{x,y}}{s_{x}^{2}}}$
\end_inset

 bude nahrazen koeficientem 
\begin_inset Formula ${\displaystyle \bar{p}=\pm\frac{s_{y}}{s_{\bar{x}}}}$
\end_inset

 počítaným pro každou iteraci z\InsetSpace ~
hodnoty 
\begin_inset Formula $s_{y}$
\end_inset

, která bude uložena jako parametr zobrazení místo vlastního 
\begin_inset Formula $p$
\end_inset

.
 Pokud povolíme zobrazení se záporným lineárním koeficientem, je třeba také
 uložit znaménko.
 Při implementaci je také potřeba ošetřit situaci, kdy 
\begin_inset Formula $s_{\bar{x}}=0$
\end_inset

, což nastává hlavně při první iteraci pro typický případ inicializace celého
 obrázku šedivou barvou.
\end_layout

\begin_layout Standard
Pokud
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 
\begin_inset Formula $s_{\bar{x}}\rightarrow s_{x}$
\end_inset

 (platí speciálně když 
\begin_inset Formula $\bar{x}\rightarrow x$
\end_inset

), pak 
\begin_inset Formula \[
{\displaystyle \frac{p}{\bar{p}}\rightarrow\pm\frac{q_{x,y}}{s_{x}^{2}}\frac{s_{x}}{s_{y}}=\pm\frac{q_{x,y}}{s_{x}s_{y}}}=\pm r_{x,y}\]

\end_inset

Pokud byla chyba barevného zobrazení s\InsetSpace ~
koeficientem 
\begin_inset Formula $p$
\end_inset

 malá, pak korelace 
\begin_inset Formula $r_{x,y}\rightarrow\pm1$
\end_inset

.
 Navíc znaménko 
\begin_inset Formula $p$
\end_inset

 (zde značeno jako 
\begin_inset Formula $\pm$
\end_inset

) je stejné jako znaménko 
\begin_inset Formula $r_{x,y}$
\end_inset

, takže 
\begin_inset Formula $\bar{p}\rightarrow p$
\end_inset

.
 Z\InsetSpace ~
toho je zřejmé, že cílový obrázek bude pevným bodem i takto pozměněného
 operátoru.
\end_layout

\begin_layout Standard
Nová a původní optimální čtvercová chyba:
\begin_inset Formula \[
\overline{SE}=<\cdots>=2n\, s_{y}^{2}\left(1\mp r_{x,y}\right)=2n\, s_{y}^{2}\left(1-\left|r_{x,y}\right|\right)\]

\end_inset


\begin_inset Formula \[
SE=n\frac{s_{x}^{2}s_{y}^{2}-q_{x,y}^{2}}{s_{x}^{2}}=n\, s_{y}^{2}\left(1-r_{x,y}^{2}\right)=n\, s_{y}^{2}\left(1-\left|r_{x,y}\right|\right)\left(1+\left|r_{x,y}\right|\right)\]

\end_inset

Z toho dostaneme absolutní a relativní nárůst chyby:
\begin_inset Formula \[
\overline{SE}-SE=n\, s_{y}^{2}\left(1-\left|r_{x,y}\right|\right)\left[2-\left(1+\left|r_{x,y}\right|\right)\right]=n\, s_{y}^{2}\left(1-\left|r_{x,y}\right|\right)^{2}\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \[
\frac{\overline{SE}-SE}{SE}=\frac{\left(1-\left|r_{x,y}\right|\right)^{2}}{\left(1-\left|r_{x,y}\right|\right)\left(1+\left|r_{x,y}\right|\right)}=\frac{1-\left|r_{x,y}\right|}{1+\left|r_{x,y}\right|}\]

\end_inset

Tedy nárůst chyby pro podobné bloky bude velmi malý.
\end_layout

\begin_layout Standard
Výhody a nevýhody tohoto přístupu jsou podobné jako při nahrazování konstantních
 koeficientů zobrazení\InsetSpace ~
--- především jednodušší reprezentace zobrazení a
 pravděpodobně také rychlejší konvergence.
\end_layout

\begin_layout Standard
V\InsetSpace ~
některých novějších publikacích
\begin_inset Note Note
status open

\begin_layout Standard
potřeba upřesnit
\end_layout

\end_inset

 o\InsetSpace ~
fraktální kompresi a také v\InsetSpace ~
této práci je používán právě tento model barevných
 zobrazení, ale nikde se mi nepodařilo nalézt nějaké zdůvodnění nebo odkaz
 na text zabývající se vlastnostmi tohoto modelu.
 Nejsou mi tedy známy žádné výsledky týkající se konvergence ani pro případné
 omezené varianty.
\end_layout

\begin_layout Standard
Koeficienty
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 
\begin_inset Formula $\bar{p}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
 nejsou stejně jako v předchozím modelu nijak omezeny, ale experimenty prováděné
 v\InsetSpace ~
rámci této práce ukazují, že může být výhodné vyhýbat se zobrazením s\InsetSpace ~
vysokým
 poměrem 
\begin_inset Formula ${\displaystyle \frac{s_{y}}{s_{\bar{x}}}}$
\end_inset

.
 Tato úprava je diskutována v\InsetSpace ~
<kapitola o\InsetSpace ~
encoderu>, včetně teoretického zdůvodněn
í.
\end_layout

\begin_layout Section
Nejčastější oblasti výzkumu
\end_layout

\begin_layout Standard
Především v\InsetSpace ~
první polovině 90.\InsetSpace \thinspace{}
let bylo věnováno fraktální kompresi velké úsilí.
 Bylo zkoumáno (většinou odděleně) mnoho odlišných způsobů vylepšení základních
 technik popsaných výše.
 V\InsetSpace ~
této části jsou shrnuty nejvýznamnější výsledky a zajímavé návrhy pro
 další výzkum.
 Pro přehlednost jsou rozčleněny podle toho, na které aspekty komprese se
 zaměřují.
\end_layout

\begin_layout Subsection
Zrychlení komprese
\end_layout

\begin_layout Standard
Za největší problém byla považována obrovská výpočetní náročnost hledání
 vhodných zdrojových bloků.
 Od dob nejintenzivnějšího výzkumu v\InsetSpace ~
oblasti se sice výkon běžných počítačů
 mnohonásobně zvýšil, ale stále je nutné se tímto problémem zabývat.
 Jedním z\InsetSpace ~
důvodů je, že dnes je potřeba zpracovávat mnohem větší množství
 dat.
 Velikosti a množství fotografií roste a také je zkoumána možnost využití
 pro kompresi videozáznamů.
\end_layout

\begin_layout Subsubsection
Klasifikační metody
\end_layout

\begin_layout Standard
Nejčastější technikou pro urychlení výběru vhodného zdrojového bloku byly
 klasifikační metody.
 Všechny cílové a potencionální zdrojové bloky jsou nějakým způsobem ohodnoceny
 a poté je vzájemná zobrazitelnost přesně vyhodnocována pouze pro 
\begin_inset Quotes gld
\end_inset

kompatibilní
\begin_inset Quotes grd
\end_inset

 dvojice.
 To typicky vede k\InsetSpace ~
vynechání některých optimálních zobrazení, ale pokles
 kvality bývá velmi malý a urychlení mnohonásobné (zkomprimovaná velikost
 se nezmění).
\end_layout

\begin_layout Standard
Většinou jde o\InsetSpace ~
jednoduché rozdělení bloků do několika tříd a uvažování pouze
 zobrazení v rámci jedné třídy, například klasifikace navržené Jacquinem
 nebo Fisherem\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

.
 Zde je nevýhodné, že pro bloky 
\begin_inset Quotes gld
\end_inset

na\InsetSpace ~
okrajích
\begin_inset Quotes grd
\end_inset

 tříd často mohou mít podobné bloky v\InsetSpace ~
jiných 
\begin_inset Quotes gld
\end_inset

sousedních
\begin_inset Quotes grd
\end_inset

 třídách.
 To vede ke složitějším metodám, které hledají i v\InsetSpace ~
příbuzných třídách, nebo
 používají hierarchické způsoby klasifikace, například\InsetSpace ~

\begin_inset LatexCommand cite
key "Han07"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Převod na hledání nejbližšího bodu
\end_layout

\begin_layout Standard
Problémem klasifikačních metod je, že přes výrazné zrychlení nejsou schopny
 zlepšit asymptotickou složitost výpočtu.
 Zde se nabízí zobecnění klasifikačních metod, kde by pro blok byl vygenerován
 vektor z\InsetSpace ~
nějakého prostoru uspořádaného tak, že vzdálenost v\InsetSpace ~
něm odpovídá
 míře vzájemné zobrazitelnosti.
 Pak by pro každý bod prostoru odpovídající nějakému cílovému bloku stačilo
 hledat nejbližší z\InsetSpace ~
množiny bodů prostoru odpovídající zdrojovým blokům.
 Hledání nejbližších sousedů je známá úloha, kterou už lze řešit výrazně
 rychleji než úměrně se součinem velikostí obou množin.
\end_layout

\begin_layout Standard
Tato možnost byla publikována mezi projekty v\InsetSpace ~
knize\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

 a podrobněji rozebrána v\InsetSpace ~
samostatném článku\InsetSpace ~

\begin_inset LatexCommand cite
key "Saup95"

\end_inset

.
 Je zde především dokázáno, že při uvažování klasických afinních zobrazení
 pro transformaci barvy mezi bloky je pro pevný cílový blok optimální čtvercová
 chyba (SE) rovna monotónní transformaci eukleidovské vzdálenosti normalizovanýc
h vektorů obou bloků (cílového a zdrojového).
 Tedy pro nalezení zdrojového bloku 
\begin_inset Quotes gld
\end_inset

nejpodobnějšího
\begin_inset Quotes grd
\end_inset

 k\InsetSpace ~
cílovému stačí jen najít nejbližší bod v\InsetSpace ~
eukleidovském prostoru.
\end_layout

\begin_layout Standard
Jsou zde různé komplikace\InsetSpace ~
--- kvůli kvantizaci koeficientů nemusí nejbližší
 bod být ten nejlepší, při uvažování i zobrazení se zápornými lineárními
 koeficienty je nutné prohledávát strukturu dvakrát (nebo vložit každý bod
 dvakrát).
 Je zde také otázka spotřeby paměti, která sice není tak velkým problémem,
 jako v\InsetSpace ~
době publikace metody, ale stále potřeba se jí věnovat.
 Dále se problematikou zabýváme v\InsetSpace ~
<odkaz na část o\InsetSpace ~
predictoru>.
\end_layout

\begin_layout Subsubsection
Lokální prohledávání
\end_layout

\begin_layout Standard
Za další možnost urychlení se považoval jiný způsob redukce nutných porovnání\InsetSpace ~
---
 přeskočení zdrojových bloků, které jsou v\InsetSpace ~
obrázku příliš vzdálené od cílového
 bloku (pro který hledáme zobrazení).
 Na rozdíl od klasifikačních metod je množina uvažovaných zdrojových bloků
 zřejmá už z\InsetSpace ~
polohy cílového bloku, takže lze ušetřit nějaký prostor nutný
 pro uložení jejich identifikačních čísel.
\end_layout

\begin_layout Standard
Základem této techniky je domněnka, že ideální zdrojový blok má větší pravděpodo
bnost výskytu blíže k\InsetSpace ~
danému cílovému bloku.
 V\InsetSpace ~
kapitole 3 knihy\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

 je ukázáno, že posun rozdělení vzdáleností optimálních dvojic oproti vzdálenost
em náhodně vybraných dvojic je zanedbatelný.
 Zrádné je zde především to, že už jen rozdělení vzdálenosti dvou náhodných
 bodů je velmi nerovnoměrné.
\end_layout

\begin_layout Standard
Jsou zde i\InsetSpace ~
další nevýhody spojené s\InsetSpace ~
tím, že je množina uvažovaných zdrojových
 bloků pro každý cílový blok jiná, například obtížná kombinace s\InsetSpace ~
jinými metodami
 urychlení komprese.
\end_layout

\begin_layout Standard
Na druhou stranu například v\InsetSpace ~
nedávném článku\InsetSpace ~

\begin_inset LatexCommand cite
key "HuQK07"

\end_inset

 je zkoumána závislost podobnosti dvou cílových bloků na jejich vzdálenosti
 s\InsetSpace ~
opačnými výsledky na stejném obrázku (Lenna).
 To je pravděpodobně způsobeno tím, že při hledání podobnosti mezi zdrojovým
 a cílovým blokem vždy dochází ke zmenšování, zatímco blízké cílové bloky
 často mívají stejnou velikost.
\end_layout

\begin_layout Standard
Této podobnosti je zde využito nejen pro urychlení hledání zdrojového bloku
 tím, že jsou nejprve vyzkoušeny zdrojové bloky blízkých cílových bloků,
 ale hlavně ke zvýšení kompresního poměru.
 Místo ukládání identifikačního čísla zdrojového bloku stačí uložit relativní
 pozici nejbližšího cílového bloku se stejným zdrojovým blokem.
 Vzhledem k\InsetSpace ~
tomu, že cílových bloků bývá mnohem méně než zdrojových a podobné
 cílové bloky se často vyskytují blízko, lze takto ušetřit mnoho bitů ve
 výstupu za cenu minimálního poklesu kvality.
\end_layout

\begin_layout Subsubsection
Přerušení prohledávání
\end_layout

\begin_layout Standard
Další metoda snížení počtu nutných porovnání je nehledat nejlepší zdrojový
 blok a spokojit se s\InsetSpace ~
dostatečně dobrým už nalezeným blokem.
 Dosažené zrychlení ale nejspíš nebude nijak veliké.
 Nejsou mi známy žádné práce, které by se podrobněji zabývaly touto technikou.
\end_layout

\begin_layout Subsection
Zlepšení vhledu
\end_layout

\begin_layout Standard
Vetšinou nezávisle na rychlosti komprese byly zkoumány také metody zlepšující
 kvalitu dekomprimovaných obrázků.
 Zde jsou zařazeny i techniky zvyšující kompresní poměr, protože jde o\InsetSpace ~
stejný
 cíl\InsetSpace ~
--- typicky lze pouhým nastavováním parametrů komprese zlepšovat jeden
 z\InsetSpace ~
těchto ukazatelů na úkor druhého.
\end_layout

\begin_layout Subsubsection
Dělení na cílové bloky
\end_layout

\begin_layout Standard
Jedním ze základních faktorů ovlivňujících vzhled je způsob dělení obrázku
 na cílové bloky.
 Nejjednodušší je určit dělení napevno.
 To je ale v\InsetSpace ~
praxi nepoužitelné kvůli obtížné regulaci kvality a kompresního
 poměru.
 Navíc nalézt dobré zobrazení pro skoro konstatní bloky je velmi jednoduché,
 zatímco pro bloky obsahující hodně detailů nejspíš žádný vhodný zdrojový
 blok k\InsetSpace ~
dispozici nebude.
 Proto bylo nutné hledat adaptivní metody, které by v\InsetSpace ~

\begin_inset Quotes gld
\end_inset

plochých
\begin_inset Quotes grd
\end_inset

 místech nechávaly velké bloky a v\InsetSpace ~
místech se složitější kresbou mohly dělit
 obrázek na menší a zvyšovat u\InsetSpace ~
nich tak pravděpodobnost nalezení dostatečně
 dobrého zobrazení.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Jednoznačně nejpoužívanější metodou je dělení pomocí čtyřstromu (Quadtree),
 popsaného například v\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

, kapitola 3.
 Pro zjednodušení se uvažují jako velikosti obrázku a bloků jen čtverce
 o\InsetSpace ~
hranách délky mocniny 2.
 Začne se s\InsetSpace ~
jedním velkým cílovým blokem pokrývajícím celý obrázek a postupuje
 se tak, že se vždy vezme nějaký cílový blok a najde se pro něj nejlepší
 zobrazení.
 Pokud je chyba dostatečně malá, je zobrazení použito, jinak je blok rozdělen
 na čtyři o\InsetSpace ~
poloviční velikosti, pro které se použije stejný postup.
\end_layout

\begin_layout Standard
Tento způsob dělení je celkem efektivní a také jednoduchý na implementaci,
 včetně velmi úsporného uložení tvaru čtyřstromu.
 Pro použití v\InsetSpace ~
praxi je potřeba čtyřstrom zobecnit i pro jiné velikosti obrázku
 a jsou vhodná i další vylepšení.
 Podrobněji je dělení čtyřstromem rozebráno v\InsetSpace ~
<odkaz na kapitolu o RangeEncoderu>.
\end_layout

\begin_layout Standard
Jednou z\InsetSpace ~
nevýhod čtyřstromu je, že skoky mezi jednotlivými velikostmi bloků
 jsou relativně velké, takže v\InsetSpace ~
některých případech dochází k\InsetSpace ~
dělení na zbytečně
 malé bloky.
 Tento problém je řešen v\InsetSpace ~

\begin_inset LatexCommand cite
key "OnCC01"

\end_inset

 pomocí přidání jednoho mezikroku, což sice vede k\InsetSpace ~
delšímu výpočtu, ale také
 mírně zlepšuje kvalitu komprimovaných obrázků.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Zobecněním dělení čtyřstromem je HV (horizontálně-vertikální) dělení, popsané
 v 6.\InsetSpace \thinspace{}
kapitole knihy\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

.
 Základní myšlenka je stejná jako u\InsetSpace ~
čtyřstromů, akorát umožňuje dělit obecné
 obdelníkové bloky na dva menší podle libovolné svislé nebo vodorovné přímky.
\end_layout

\begin_layout Standard
To také vede k\InsetSpace ~
menším skokům mezi velikostmi bloků, ale hlavní výhoda je
 ve vyšší adaptivitě.
 V\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

 je navržena heuristická metoda, která vybírá místo dělení nejčastěji těsně
 u\InsetSpace ~
silných barevných zlomů a zároveň se vyhýbá blokům s\InsetSpace ~
příliš velkým poměrem
 délek stran.
 To zvyšuje pravděpodobnost nalezení vhodného zdrojového bloku a vyvažuje
 tak větší složitost uložení struktury rozdělení obrázku.
\end_layout

\begin_layout Standard
Podle autorů dává metoda o\InsetSpace ~
něco lepší výsledky než klasický čtyřstrom, ale
 komplikuje ostatní fáze komprese.
 Protože cílové bloky mohou mít libovolné obdelníkové tvary, je mnohem těžší
 použití klasifikačních a jiných urychlujících metod.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Další typy dělení, například trojúhelníkové, polygonální, nebo šestiúhelníkové
\begin_inset Foot
status collapsed

\begin_layout Standard
toto dělení na rozdíl od šestiúhelníkové architektury zmíněné níže pracuje
 s\InsetSpace ~
klasickými čtvercovými pixely, jen zdrojové bloky mají přibližně tvar
 šestiúhelníků
\end_layout

\end_inset

 jsou velmi komplikované na implementaci a pravděpodobně by nepřinesly významné
 zlepšení kvality.
 Mezi jejich předpokládané výhody ale patří méně 
\begin_inset Quotes gld
\end_inset

blokovitý
\begin_inset Quotes grd
\end_inset

 vhled způsobený dělením podle šikmých nebo různě orientovaných hran, případně
 mírným překryvem pixelů na krajích bloků.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dělení na nezávisle zobrazované bloky vytváří rušivou strukturu, jejíž redukcí
 je možné výrazně zlepšit subjektivní vzhled a někdy i PSNR komprimovaného
 obrázku.
 Problémem je vysoká citlivost lidského na hrany, obzvláště horizontálně
 a vertikálně orientované.
 Pro potlačení této struktury lze dělat zásahy na dvou různých místech celého
 kompresního procesu.
\end_layout

\begin_layout Standard
Nejjednodušší možnost je věnovat se tomuto problému až při dekódování.
 Hranice bloků jsou vždy známé, takže je možné vyhlazovat výsledný obrázek
 jen na jejich okrajích.
 Vizuálního zlepšení lze dosáhnout už použitím jednoduchých nebo vážených
 průměrů (
\begin_inset LatexCommand cite
key "Aoue04"

\end_inset

\InsetSpace ~
a\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

).
 U obrázků s\InsetSpace ~
vyšším kompresním poměrem a také u jednotlivých větších cílových
 bloků je větší potřeba vyhlazování a obvykle dojde i ke zvýšení PSNR, ale
 naopak při nastavení vysoké kvality po vyhlazování PSNR klesne (přestože
 obrázek často 
\begin_inset Quotes gld
\end_inset

vypadá lépe
\begin_inset Quotes grd
\end_inset

).
\end_layout

\begin_layout Standard
Další možností je snažit se redukovat tyto přechody už při kompresi.
 Zde mi nejsou známy žádné publikované výsledky kromě návrhů způsobů řešení.
 Lze vážit chybu na okrajích cílových bloků více než chybu uvnitř, případně
 použít dělení na překrývající se bloky a při dekódování hodnoty na překryvu
 kombinovat.
\end_layout

\begin_layout Subsubsection
Zdrojové bloky
\end_layout

\begin_layout Standard
Dalším faktorem ovlivňujícím vzhled je volba souboru zdrojových bloků.
 Důležitý je především počet bloků v\InsetSpace ~
souboru.
 Zvýšení počtu sice vede k\InsetSpace ~
potřebě většího prostoru na uložení identifikačních
 čísel zdrojových bloků, ale také zvyšuje pravděpodobnost nalezení vhodného
 bloku, takže lze při stejné kvalitě použít rozdělení obrázku na menší počet
 větších cílových bloků.
\end_layout

\begin_layout Standard
Výsledky testování (například v\InsetSpace ~

\begin_inset LatexCommand cite
key "Saup95,Fish95"

\end_inset

) ukazují, že zvyšování množství zdrojových bloků typicky vede ke zlepšení
 kvality.
 Nevýhodou je vyšší výpočetní náročnost.
 Zde se ukazuje spojitost se zrychlením komprese\InsetSpace ~
--- při vyšší rychlosti
 by bylo únosné prohledat větší soubor bloků a zlepšit tak kvalitu (případně
 kompresní poměr).
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Kromě množství zdrojových bloků je potřeba rozhodnout, jak zdrojové bloky
 vybírat.
 Základní podmínkou je, že musí být větší než příslušné cílové bloky, aby
 byla prostorová část zobrazení kontraktivní.
 Ekvivalentně lze uvažovat výběr zdrojových bloků stejně velkých jako příslušné
 cílové z\InsetSpace ~
nějaké zmenšeniny původního obrázku.
 To je díky své obecnosti někdy výhodné i pro implementaci (využito také
 v\InsetSpace ~
této práci).
\end_layout

\begin_layout Standard
Samotné zmenšování lze provádět mnoha různými způsoby.
 Kvůli jednoduché implementaci se nejčastěji používá především zmenšování
 v\InsetSpace ~
obou rozměrech na polovinu (průměrováním hodnot po čtveřicích) a navíc
 se uvažuje všech osm transformací čtverce složených ze\InsetSpace ~
symetrií a otáčení
 o\InsetSpace ~
násobky 
\begin_inset Formula $90^{\circ}$
\end_inset

.
 V\InsetSpace ~

\begin_inset LatexCommand cite
key "Aoue04"

\end_inset

 je navíc zkoumáno použití zmenšování s\InsetSpace ~
kontraktivitou rozdílnou pro obě
 osy nebo s\InsetSpace ~
přidáním otočení o\InsetSpace ~

\begin_inset Formula $45^{\circ}$
\end_inset

 s\InsetSpace ~
nejasnými výsledky <odkaz na kapitolu o\InsetSpace ~
doménách>.
\end_layout

\begin_layout Standard
Podle\InsetSpace ~

\begin_inset LatexCommand cite
key "Saup96"

\end_inset

 přidávání osmi transformací čtverce nijak nezlepšuje kvalitu, ale může
 sloužit spíše jako způsob zvětšování počtu zdrojových bloků.
 V\InsetSpace ~
takto zvětšeném souboru bloků je často pak možné dosáhnout úspory paměti
 a zrychlení oproti jiným způsobům zvětšování souboru.
\end_layout

\begin_layout Subsubsection
Šestiúhelníková architektura
\end_layout

\begin_layout Standard
V\InsetSpace ~
poslední době je zkoumáno také pojetí obrázku jako bodů uspořádaných do
 šestiúhelníkové mříže místo čtvercové.
 Tato architektura mnohem lépe odpovídá rozložení tyčinek a čípků na sítnici
 oka a také vede k\InsetSpace ~
přirozené redukci horizontálních a vertikálních artefaktů.
 Další výhodou je větší množství přirozených rotací na mříži.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Protože běžné formáty obrázků podporují pouze obdélníkový tvar se\InsetSpace ~
čtvercovými
 body, je potřeba nejprve stanovit způsob převodu mezi mřížemi.
 Objevují se dva různé přístupy.
 První možnost je představit si čtvercovou mříž o\InsetSpace ~

\begin_inset Formula $60^{\circ}$
\end_inset

 zkosenou, tím se středy pixelů dostanou právě do pravidelné šestiúhelníkové
 mříže a je možné je převádět 
\begin_inset Formula $1:1$
\end_inset

 (například v\InsetSpace ~

\begin_inset LatexCommand cite
key "ThKa07"

\end_inset

).
 Druhou možností je body přepočítat pomocí váženého průměrování, například
 metodou ukázanou v\InsetSpace ~

\begin_inset LatexCommand cite
key "HWWHH06"

\end_inset

.
\end_layout

\begin_layout Standard
Výhoda prvního přístupu oproti druhému je, že zobrazuje právě jeden čtvercový
 pixel na jeden šestiúhelníkový, takže nedochází k žádnému rozmazávání.
 Na druhou stranu se v\InsetSpace ~
podstatě pracuje se zkoseným obrázkem, takže interpretace
 vzdáleností bude v\InsetSpace ~
různých směrech různě změněna, což může vést k\InsetSpace ~
nerovnoměrným
 projevům zkreslení způsobeného kompresí.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Změna architektury také přináší mnoho otázek a implementačních problémů.
 Po libovolném převodu obdélníkového obrázku budou v\InsetSpace ~
šestiúhelníkové mříži
 
\begin_inset Quotes gld
\end_inset

díry
\begin_inset Quotes grd
\end_inset

 neobvyklých tvarů nebo nepravidelné okraje a už samotný způsob reprezentace
 mříže v\InsetSpace ~
paměti je netriviální.
 Ve zmíněných článcích jsou tyto potíže řešeny kompresí pouze části obrázku
 o\InsetSpace ~
vhodném tvaru, ale ani tak zde dosažené výsledky nejsou přesvědčivé.
\end_layout

\begin_layout Subsubsection
Zpracování barev
\end_layout

\begin_layout Standard
Ve většině případů je fraktálová komprese zkoumána pouze na obrázcích ve
 stupních šedi s\InsetSpace ~
argumentem, že barevné obrázky lze snadno komprimovat jako
 tři nezávislé jednobarevné.
 Je ale zřejmé, že RGB není vhodný model pro kompresi obrazu, protože jsou
 jeho složky vzájemně silně závislé.
 <text s\InsetSpace ~
odkazem na kapitolu o\InsetSpace ~
ColorTransformeru>
\end_layout

\begin_layout Standard
Nejjednodušší je použít některý z\InsetSpace ~
barevných prostorů navržených pro tyto
 účely, například YCbCr nebo L*a*b*.
 Toto je standardní řešení v\InsetSpace ~
mnoha jiných metodách komprese obrazu.
 V\InsetSpace ~
závislosti na použitém modelu může být vhodné navíc upravit nastavení
 kvality komprese jednotlivých složek, protože citlivost oka na různé barvy
 se liší.
 Ve formátech založených na JPEGu se dokonce u\InsetSpace ~
barevných složek snižuje rozlišení
, ale ve fraktálové kompresi je mnohem výhodnější rozlišení ponechat a snížit
 kvalitu, protože zde výhody oproti JPEGu rostou s\InsetSpace ~
kompresním poměrem.
\end_layout

\begin_layout Standard
Alternativně lze spočítat vlastní barevný prostor pro konkrétní obrázek.
 Budeme pro jednoduchost uvažovat jen o\InsetSpace ~
změnu báze ve vektorovém prostoru,
 charakterizovanou maticí velikosti 
\begin_inset Formula $3\times3$
\end_inset

.
 Zde lze použít metodu zvanou PCA (principal component analysis), známou
 také jako KLT (Karhunen–Loève transform).
 Metoda nalezne nejlepší ortonormální bázi z\InsetSpace ~
hlediska soustředění maxima
 informace (rozptylu) do minima souřadnic.
 Transformační matice je dána vlastními vektory kovariační matice a navíc
 příslušná vlastní čísla charakterizují důležitost jednotlivých souřadnic.
\begin_inset Foot
status collapsed

\begin_layout Standard
PCA samotná lze použít ke kompresi obázků tak, že se obrázek rozdělí na
 bloky a s\InsetSpace ~
každým z\InsetSpace ~
nich se pracuje jako s\InsetSpace ~
vektorem.
 Po náročném výpočtu pak vznikne transformace v\InsetSpace ~
praxi často velmi podobná
 diskrétní kosinové transformaci.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Je možné také volit jiné přístupy ke zpracování barev.
 V\InsetSpace ~

\begin_inset LatexCommand cite
key "ThKa06"

\end_inset

 je předvedena metoda, která pomocí čtyřstromu dělí barevný obrázek na bloky
 (podobně jako při dělení cílových bloků) dokud nejsou barvy v\InsetSpace ~
blocích dostatečně
 korelované.
 Parametry korelace barev pro každý z\InsetSpace ~
bloků jsou uloženy a do dalšího kódování
 postupuje již jen jeden obrázek ve stupních šedi.
 Zde je výhoda v\InsetSpace ~
adaptivní kompresi informací o\InsetSpace ~
barvě a také v\InsetSpace ~
urychlení díky
 tomu, že se složité metody fraktální komprese použijí jen na jeden jednobarevný
 obrázek, přestože většina vnímané informace bude obsažena právě v\InsetSpace ~
něm.
\end_layout

\begin_layout Subsubsection
Další metody
\begin_inset LatexCommand label
name "Články-Zlepšení_vzhledu-Další_metody"

\end_inset


\end_layout

\begin_layout Standard
Zde ještě ještě stručně zmíněno několik dalších metod používaných pro zlepšení
 vzhledu komprimovaných obrázků.
\end_layout

\begin_layout Standard
Obzvláště při vysokých kompresních poměrech je výhodné počítat chybu zobrazení
 ze zdrojových bloků do cílových s\InsetSpace ~
použitím kvantizovaných parametrů zobrazení
 místo teoretických optim (tedy z\InsetSpace ~
hodnot dostupných při dekompresi místo
 hodnot dostupných při kompresi).
 Aby šlo metodu použít, je potřeba se omezit jen na některé způsoby kvantizace
 a také výpočet této chyby bývá trochu složitější.
\end_layout

\begin_layout Standard
Jak již bylo zmíněno, RMSE metrika pro větší bloky nepopisuje dobře vnímaný
 rozdíl.
 Použití přesnějších metrik bylo zatím věnováno jen velmi málo pozornosti,
 především díky jednoduchosti práce s\InsetSpace ~
RMSE umožnující relativně rychlou implement
aci jejího vyhodnocení.
 Vhodností jiných metrik pro fraktální kompresi se zabývá například\InsetSpace ~

\begin_inset LatexCommand cite
key "AbateNR07"

\end_inset

.
\end_layout

\begin_layout Standard
PIFS uvažuje afinní zobrazení z\InsetSpace ~
jednoho zdrojového bloku do jednoho cílového
 bloku.
 To lze zobecnit na hledání zobrazení z\InsetSpace ~
dvou nebo více zdrojových bloků.
 Víceprůchodové komprese, kde se jednoduše kóduje chyba předchozího kroku
 nedávají lepší výsledky.
 Přímé hledání zobrazení z\InsetSpace ~
více zdrojových bloků ke zlepšení kvality výsledku
 vede, ale množství kombinací zde roste ještě mnohem rychleji než v\InsetSpace ~
klasické
 PIFS kompresi.
 Například v\InsetSpace ~

\begin_inset LatexCommand cite
key "EuOn06"

\end_inset

 je navrženo snižovat složitost pomocí redukce podobných zdrojových bloků
 a použití hladového přístupu.
\end_layout

\begin_layout Subsection
Jiná vylepšení
\end_layout

\begin_layout Subsubsection
Rychlost dekomprese
\end_layout

\begin_layout Standard
Fraktální dekomprese bývá považována za velmi rychlou, což plyne především
 z\InsetSpace ~
velké náročnosti kompresní fáze.
 Přesto při prvních iteracích zobrazení je obrázek složen z\InsetSpace ~
jednolitých bloků
 a je tedy zbytečné pracovat v\InsetSpace ~
plném rozlišení.
\end_layout

\begin_layout Standard
Jak je uvedeno v\InsetSpace ~

\begin_inset LatexCommand cite
key "Fish95"

\end_inset

, stačí začít dekompresi na zmenšeném obrázku, kde nejmenší cílové bloky
 zabírají jediný pixel, a po každé iteraci zobrazení pak zvětšit obrázek
 na dvojnásobek (efektivní především při dělení čtyřstromem).
 V\InsetSpace ~
plné velikosti pak stačí udělat jen okolo dvou iterací.
\end_layout

\begin_layout Subsubsection
Progresivní dekódování
\end_layout

\begin_layout Standard
Při praktickém využití je důležitá možnost progresivního dekódování obrázků\InsetSpace ~
---
 generování náhledů s\InsetSpace ~
použitím pouze malé počáteční části souboru.
 To je užitečné především na internetových stránkách, nebo při prohlížení
 adresářů s\InsetSpace ~
velkým množstvím fotografií.
 Progresivním dekódováním pro klasický PIFS se zabývá 
\begin_inset LatexCommand cite
key "WWHH06"

\end_inset

.
\end_layout

\begin_layout Standard
Při použití modifikací nahrazující konstantní koeficienty barevných zobrazení
 průměrnými barvami cílových bloků lze ale postupovat mnohem efektivněji\InsetSpace ~
---
 uložit nejprve způsob rozdělení na bloky (zabere velmi málo místa), potom
 průměrné barvy všech cílových bloků a pak až ostatní parametry.
 Tím lze generovat z\InsetSpace ~
velmi malé části souboru náhled jen z\InsetSpace ~
průměrných barev
 bloků, který může vypadat relativně dobře, obzvláště pokud se pro zobrazení
 použijí pokročilé interpolační metody.
\end_layout

\begin_layout Subsection
Využití technik fraktální komprese pro jiné účely
\end_layout

\begin_layout Standard
Fraktální komprese má velmi zajímavé vlastnosti, které lze využít i pro
 další, často velmi odlišné, účely.
 V této části budou nějdůležitějších z\InsetSpace ~
nich zmíněny, ale jen velmi stručně
 a bez odkazů na zdroje.
\end_layout

\begin_layout Standard
Díky možnosti dekódování v\InsetSpace ~
libovolném rozlišení lze použít fraktální kompresi
 pro inteligentní zvětšování obrázků.
 Při správném nastavení dává velmi dobré výsledky díky tomu, že zvětšenina
 nepůsobí rozmazaným dojmem a ostré hrany jsou výborně zachovány.
\end_layout

\begin_layout Standard
Z\InsetSpace ~
podobných důvodů lze fraktální kompresi použít i pro čištění obrázků od
 šumu.
 Při kontraktivních zobrazeních mezi bloky se totiž šum velmi potlačí a
 proto nelze typicky najít zdrojový blok, který by šum v\InsetSpace ~
cílovém bloku napodobil.
 Větší útvary a ostré hrany se naopak většinou podaří mezi zdrojovými bloky
 najít, takže zůstanou zachovány.
\end_layout

\begin_layout Standard
Je také zkoumáno přidávání 
\begin_inset Quotes gld
\end_inset

vodoznaků
\begin_inset Quotes grd
\end_inset

 do obrázků pomocí fraktální komprese.
 Ty mají velmi zajímavé vlastnosti\InsetSpace ~
--- nejsou vidět (ale lze je z\InsetSpace ~
obrázku
 extrahovat) a jsou velmi odolné proti ořezávání obrázku, JPEG kompresi
 a jiným pokusům o\InsetSpace ~
odstranění.
\end_layout

\begin_layout Standard
Dále je diskutována možnost využití technik fraktální komprese pro videonahrávky.
 Největší redundance je zde v\InsetSpace ~
podobnosti mezi po sobě následujícími snímky.
 V\InsetSpace ~
klasických metodách se používají bloky některých snímků jako predikce
 stejně umístěných (případně trochu posunutých) bloků jiných snímků a kóduje
 se jen rozdíl.
 Stejnou metodu lze využít i při fraktální kompresi, ale nabízí se mnohem
 přirozenější rozšíření.
 Stačí k\InsetSpace ~
dvoudimenzionálnímu prostoru pixelů v\InsetSpace ~
obrázcích přidat třetí dimenzi
 tvořenou časem.
 Potom videozáznam dělený na 
\begin_inset Quotes gld
\end_inset

kvádry
\begin_inset Quotes grd
\end_inset

 místo obdélníků lze komprimovat podobným způsobem jako obrázky pomocí zobrazení
 mezi trojdimenzionálními bloky.
 Zde je zajímavá například možnost dekódování ve vyšším rozlišení\InsetSpace ~
--- lze
 tak generovat rozumné mezisnímky, které v\InsetSpace ~
původní nahrávce nebyly.
\end_layout

\begin_layout Standard

\newpage

\begin_inset LatexCommand bibtex
options "bibtotoc,plain"
bibfiles "fractals"

\end_inset


\end_layout

\end_body
\end_document
